<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="643" errors="0" failures="39" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2017-02-01" time="21:25:01">
  <environment user="Daniel" machine-name="PLAGUE-WINDEV" cwd="C:\Users\Daniel\Source\GitHub\xNetworking" user-domain="PLAGUE-WINDEV" platform="Microsoft Windows 10 Enterprise|C:\Windows|\Device\Harddisk0\Partition4" nunit-version="2.5.8.0" os-version="10.0.14393" clr-version="4.0.30319.42000" />
  <culture-info current-culture="en-NZ" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Failure" success="False" time="341.3227" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xDefaultGatewayAddress.Tests.ps1" executed="True" result="Success" success="True" time="14.0634" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xDefaultGatewayAddress.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MSFT_xDefaultGatewayAddress\Get-TargetResource" executed="True" result="Success" success="True" time="10.8494" asserts="0" description="MSFT_xDefaultGatewayAddress\Get-TargetResource">
            <results>
              <test-suite type="TestFixture" name="checking return with default gateway" executed="True" result="Success" success="True" time="10.6334" asserts="0" description="checking return with default gateway">
                <results>
                  <test-case description="should return current default gateway" name="MSFT_xDefaultGatewayAddress\Get-TargetResource.checking return with default gateway.should return current default gateway" time="10.6334" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="checking return with no default gateway" executed="True" result="Success" success="True" time="0.2159" asserts="0" description="checking return with no default gateway">
                <results>
                  <test-case description="should return no default gateway" name="MSFT_xDefaultGatewayAddress\Get-TargetResource.checking return with no default gateway.should return no default gateway" time="0.2159" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xDefaultGatewayAddress\Set-TargetResource" executed="True" result="Success" success="True" time="0.7131" asserts="0" description="MSFT_xDefaultGatewayAddress\Set-TargetResource">
            <results>
              <test-suite type="TestFixture" name="invoking with no Default Gateway Address" executed="True" result="Success" success="True" time="0.4208" asserts="0" description="invoking with no Default Gateway Address">
                <results>
                  <test-case description="should return $null" name="MSFT_xDefaultGatewayAddress\Set-TargetResource.invoking with no Default Gateway Address.should return $null" time="0.3084" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDefaultGatewayAddress\Set-TargetResource.invoking with no Default Gateway Address.should call all the mocks" time="0.1124" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with valid Default Gateway Address" executed="True" result="Success" success="True" time="0.2922" asserts="0" description="invoking with valid Default Gateway Address">
                <results>
                  <test-case description="should return $null" name="MSFT_xDefaultGatewayAddress\Set-TargetResource.invoking with valid Default Gateway Address.should return $null" time="0.2064" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDefaultGatewayAddress\Set-TargetResource.invoking with valid Default Gateway Address.should call all the mocks" time="0.0859" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xDefaultGatewayAddress\Test-TargetResource" executed="True" result="Success" success="True" time="1.8582" asserts="0" description="MSFT_xDefaultGatewayAddress\Test-TargetResource">
            <results>
              <test-suite type="TestFixture" name="checking return with default gateway that matches currently set one" executed="True" result="Success" success="True" time="1.4381" asserts="0" description="checking return with default gateway that matches currently set one">
                <results>
                  <test-case description="should return true" name="MSFT_xDefaultGatewayAddress\Test-TargetResource.checking return with default gateway that matches currently set one.should return true" time="1.4381" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="checking return with no gateway but one is currently set" executed="True" result="Success" success="True" time="0.1252" asserts="0" description="checking return with no gateway but one is currently set">
                <results>
                  <test-case description="should return false" name="MSFT_xDefaultGatewayAddress\Test-TargetResource.checking return with no gateway but one is currently set.should return false" time="0.1252" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="checking return with default gateway but none are currently set" executed="True" result="Success" success="True" time="0.1393" asserts="0" description="checking return with default gateway but none are currently set">
                <results>
                  <test-case description="should return false" name="MSFT_xDefaultGatewayAddress\Test-TargetResource.checking return with default gateway but none are currently set.should return false" time="0.1393" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="checking return with no gateway and none are currently set" executed="True" result="Success" success="True" time="0.1556" asserts="0" description="checking return with no gateway and none are currently set">
                <results>
                  <test-case description="should return true" name="MSFT_xDefaultGatewayAddress\Test-TargetResource.checking return with no gateway and none are currently set.should return true" time="0.1556" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xDefaultGatewayAddress\Assert-ResourceProperty" executed="True" result="Success" success="True" time="0.6428" asserts="0" description="MSFT_xDefaultGatewayAddress\Assert-ResourceProperty">
            <results>
              <test-suite type="TestFixture" name="invoking with bad interface alias" executed="True" result="Success" success="True" time="0.1962" asserts="0" description="invoking with bad interface alias">
                <results>
                  <test-case description="should throw an InterfaceNotAvailable error" name="MSFT_xDefaultGatewayAddress\Assert-ResourceProperty.invoking with bad interface alias.should throw an InterfaceNotAvailable error" time="0.1962" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with invalid IP Address" executed="True" result="Success" success="True" time="0.1016" asserts="0" description="invoking with invalid IP Address">
                <results>
                  <test-case description="should throw an AddressFormatError error" name="MSFT_xDefaultGatewayAddress\Assert-ResourceProperty.invoking with invalid IP Address.should throw an AddressFormatError error" time="0.1016" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with IPv4 Address and family mismatch" executed="True" result="Success" success="True" time="0.0874" asserts="0" description="invoking with IPv4 Address and family mismatch">
                <results>
                  <test-case description="should throw an AddressMismatchError error" name="MSFT_xDefaultGatewayAddress\Assert-ResourceProperty.invoking with IPv4 Address and family mismatch.should throw an AddressMismatchError error" time="0.0874" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with IPv6 Address and family mismatch" executed="True" result="Success" success="True" time="0.087" asserts="0" description="invoking with IPv6 Address and family mismatch">
                <results>
                  <test-case description="should throw an AddressMismatchError error" name="MSFT_xDefaultGatewayAddress\Assert-ResourceProperty.invoking with IPv6 Address and family mismatch.should throw an AddressMismatchError error" time="0.087" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with valid IPv4 Address" executed="True" result="Success" success="True" time="0.0934" asserts="0" description="invoking with valid IPv4 Address">
                <results>
                  <test-case description="should not throw an error" name="MSFT_xDefaultGatewayAddress\Assert-ResourceProperty.invoking with valid IPv4 Address.should not throw an error" time="0.0934" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with valid IPv6 Address" executed="True" result="Success" success="True" time="0.0772" asserts="0" description="invoking with valid IPv6 Address">
                <results>
                  <test-case description="should not throw an error" name="MSFT_xDefaultGatewayAddress\Assert-ResourceProperty.invoking with valid IPv6 Address.should not throw an error" time="0.0772" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xDhcpClient.Tests.ps1" executed="True" result="Success" success="True" time="3.0495" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xDhcpClient.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MSFT_xDhcpClient\Get-TargetResource" executed="True" result="Success" success="True" time="0.7645" asserts="0" description="MSFT_xDhcpClient\Get-TargetResource">
            <results>
              <test-suite type="TestFixture" name="invoking with when DHCP is enabled" executed="True" result="Success" success="True" time="0.4612" asserts="0" description="invoking with when DHCP is enabled">
                <results>
                  <test-case description="should return DHCP state of enabled" name="MSFT_xDhcpClient\Get-TargetResource.invoking with when DHCP is enabled.should return DHCP state of enabled" time="0.4007" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDhcpClient\Get-TargetResource.invoking with when DHCP is enabled.should call all the mocks" time="0.0605" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with when DHCP is disabled" executed="True" result="Success" success="True" time="0.3033" asserts="0" description="invoking with when DHCP is disabled">
                <results>
                  <test-case description="should return DHCP state of disabled" name="MSFT_xDhcpClient\Get-TargetResource.invoking with when DHCP is disabled.should return DHCP state of disabled" time="0.2582" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDhcpClient\Get-TargetResource.invoking with when DHCP is disabled.should call all the mocks" time="0.0452" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xDhcpClient\Set-TargetResource" executed="True" result="Success" success="True" time="1.055" asserts="0" description="MSFT_xDhcpClient\Set-TargetResource">
            <results>
              <test-suite type="TestFixture" name="invoking with state enabled but DHCP is currently disabled" executed="True" result="Success" success="True" time="0.3646" asserts="0" description="invoking with state enabled but DHCP is currently disabled">
                <results>
                  <test-case description="should not throw an exception" name="MSFT_xDhcpClient\Set-TargetResource.invoking with state enabled but DHCP is currently disabled.should not throw an exception" time="0.2966" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call appropriate mocks" name="MSFT_xDhcpClient\Set-TargetResource.invoking with state enabled but DHCP is currently disabled.should call appropriate mocks" time="0.0681" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with state disabled and DHCP is currently disabled" executed="True" result="Success" success="True" time="0.1986" asserts="0" description="invoking with state disabled and DHCP is currently disabled">
                <results>
                  <test-case description="should not throw an exception" name="MSFT_xDhcpClient\Set-TargetResource.invoking with state disabled and DHCP is currently disabled.should not throw an exception" time="0.1198" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call appropriate mocks" name="MSFT_xDhcpClient\Set-TargetResource.invoking with state disabled and DHCP is currently disabled.should call appropriate mocks" time="0.0788" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with state enabled and DHCP is currently enabled" executed="True" result="Success" success="True" time="0.2755" asserts="0" description="invoking with state enabled and DHCP is currently enabled">
                <results>
                  <test-case description="should not throw an exception" name="MSFT_xDhcpClient\Set-TargetResource.invoking with state enabled and DHCP is currently enabled.should not throw an exception" time="0.2056" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call appropriate mocks" name="MSFT_xDhcpClient\Set-TargetResource.invoking with state enabled and DHCP is currently enabled.should call appropriate mocks" time="0.0699" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with state disabled but DHCP is currently enabled" executed="True" result="Success" success="True" time="0.2162" asserts="0" description="invoking with state disabled but DHCP is currently enabled">
                <results>
                  <test-case description="should not throw an exception" name="MSFT_xDhcpClient\Set-TargetResource.invoking with state disabled but DHCP is currently enabled.should not throw an exception" time="0.1352" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call appropriate mocks" name="MSFT_xDhcpClient\Set-TargetResource.invoking with state disabled but DHCP is currently enabled.should call appropriate mocks" time="0.081" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xDhcpClient\Test-TargetResource" executed="True" result="Success" success="True" time="1.0052" asserts="0" description="MSFT_xDhcpClient\Test-TargetResource">
            <results>
              <test-suite type="TestFixture" name="invoking with state enabled but DHCP is currently disabled" executed="True" result="Success" success="True" time="0.2656" asserts="0" description="invoking with state enabled but DHCP is currently disabled">
                <results>
                  <test-case description="should return false" name="MSFT_xDhcpClient\Test-TargetResource.invoking with state enabled but DHCP is currently disabled.should return false" time="0.2231" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all mocks" name="MSFT_xDhcpClient\Test-TargetResource.invoking with state enabled but DHCP is currently disabled.should call all mocks" time="0.0426" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with state disabled and DHCP is currently disabled" executed="True" result="Success" success="True" time="0.166" asserts="0" description="invoking with state disabled and DHCP is currently disabled">
                <results>
                  <test-case description="should return true" name="MSFT_xDhcpClient\Test-TargetResource.invoking with state disabled and DHCP is currently disabled.should return true" time="0.1185" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all mocks" name="MSFT_xDhcpClient\Test-TargetResource.invoking with state disabled and DHCP is currently disabled.should call all mocks" time="0.0475" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with state enabled and DHCP is currently enabled" executed="True" result="Success" success="True" time="0.3607" asserts="0" description="invoking with state enabled and DHCP is currently enabled">
                <results>
                  <test-case description="should return true" name="MSFT_xDhcpClient\Test-TargetResource.invoking with state enabled and DHCP is currently enabled.should return true" time="0.1597" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all mocks" name="MSFT_xDhcpClient\Test-TargetResource.invoking with state enabled and DHCP is currently enabled.should call all mocks" time="0.201" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with state disabled but DHCP is currently enabled" executed="True" result="Success" success="True" time="0.2129" asserts="0" description="invoking with state disabled but DHCP is currently enabled">
                <results>
                  <test-case description="should return false" name="MSFT_xDhcpClient\Test-TargetResource.invoking with state disabled but DHCP is currently enabled.should return false" time="0.152" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all mocks" name="MSFT_xDhcpClient\Test-TargetResource.invoking with state disabled but DHCP is currently enabled.should call all mocks" time="0.0609" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xDhcpClient\Assert-ResourceProperty" executed="True" result="Success" success="True" time="0.2247" asserts="0" description="MSFT_xDhcpClient\Assert-ResourceProperty">
            <results>
              <test-suite type="TestFixture" name="invoking with bad interface alias" executed="True" result="Success" success="True" time="0.2247" asserts="0" description="invoking with bad interface alias">
                <results>
                  <test-case description="should throw an InterfaceNotAvailable error" name="MSFT_xDhcpClient\Assert-ResourceProperty.invoking with bad interface alias.should throw an InterfaceNotAvailable error" time="0.2247" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xDnsClientGlobalSetting.Tests.ps1" executed="True" result="Success" success="True" time="3.353" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xDnsClientGlobalSetting.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MSFT_xDnsClientGlobalSetting\Get-TargetResource" executed="True" result="Success" success="True" time="1.1636" asserts="0" description="MSFT_xDnsClientGlobalSetting\Get-TargetResource">
            <results>
              <test-suite type="TestFixture" name="DNS Client Global Settings Exists" executed="True" result="Success" success="True" time="1.1636" asserts="0" description="DNS Client Global Settings Exists">
                <results>
                  <test-case description="should return correct DNS Client Global Settings values" name="MSFT_xDnsClientGlobalSetting\Get-TargetResource.DNS Client Global Settings Exists.should return correct DNS Client Global Settings values" time="1.0686" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call the expected mocks" name="MSFT_xDnsClientGlobalSetting\Get-TargetResource.DNS Client Global Settings Exists.should call the expected mocks" time="0.0951" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xDnsClientGlobalSetting\Set-TargetResource" executed="True" result="Success" success="True" time="1.076" asserts="0" description="MSFT_xDnsClientGlobalSetting\Set-TargetResource">
            <results>
              <test-suite type="TestFixture" name="DNS Client Global Settings all parameters are the same" executed="True" result="Success" success="True" time="0.2209" asserts="0" description="DNS Client Global Settings all parameters are the same">
                <results>
                  <test-case description="should not throw error" name="MSFT_xDnsClientGlobalSetting\Set-TargetResource.DNS Client Global Settings all parameters are the same.should not throw error" time="0.1651" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xDnsClientGlobalSetting\Set-TargetResource.DNS Client Global Settings all parameters are the same.should call expected Mocks" time="0.0558" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DNS Client Global Settings SuffixSearchList is different" executed="True" result="Success" success="True" time="0.2012" asserts="0" description="DNS Client Global Settings SuffixSearchList is different">
                <results>
                  <test-case description="should not throw error" name="MSFT_xDnsClientGlobalSetting\Set-TargetResource.DNS Client Global Settings SuffixSearchList is different.should not throw error" time="0.1579" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xDnsClientGlobalSetting\Set-TargetResource.DNS Client Global Settings SuffixSearchList is different.should call expected Mocks" time="0.0433" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DNS Client Global Settings SuffixSearchList Array is different" executed="True" result="Success" success="True" time="0.2664" asserts="0" description="DNS Client Global Settings SuffixSearchList Array is different">
                <results>
                  <test-case description="should not throw error" name="MSFT_xDnsClientGlobalSetting\Set-TargetResource.DNS Client Global Settings SuffixSearchList Array is different.should not throw error" time="0.2019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xDnsClientGlobalSetting\Set-TargetResource.DNS Client Global Settings SuffixSearchList Array is different.should call expected Mocks" time="0.0645" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DNS Client Global Settings DevolutionLevel is different" executed="True" result="Success" success="True" time="0.1916" asserts="0" description="DNS Client Global Settings DevolutionLevel is different">
                <results>
                  <test-case description="should not throw error" name="MSFT_xDnsClientGlobalSetting\Set-TargetResource.DNS Client Global Settings DevolutionLevel is different.should not throw error" time="0.1315" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xDnsClientGlobalSetting\Set-TargetResource.DNS Client Global Settings DevolutionLevel is different.should call expected Mocks" time="0.0601" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DNS Client Global Settings UseDevolution is different" executed="True" result="Success" success="True" time="0.196" asserts="0" description="DNS Client Global Settings UseDevolution is different">
                <results>
                  <test-case description="should not throw error" name="MSFT_xDnsClientGlobalSetting\Set-TargetResource.DNS Client Global Settings UseDevolution is different.should not throw error" time="0.1413" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xDnsClientGlobalSetting\Set-TargetResource.DNS Client Global Settings UseDevolution is different.should call expected Mocks" time="0.0546" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xDnsClientGlobalSetting\Test-TargetResource" executed="True" result="Success" success="True" time="1.1133" asserts="0" description="MSFT_xDnsClientGlobalSetting\Test-TargetResource">
            <results>
              <test-suite type="TestFixture" name="DNS Client Global Settings all parameters are the same" executed="True" result="Success" success="True" time="0.213" asserts="0" description="DNS Client Global Settings all parameters are the same">
                <results>
                  <test-case description="should return true" name="MSFT_xDnsClientGlobalSetting\Test-TargetResource.DNS Client Global Settings all parameters are the same.should return true" time="0.18" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xDnsClientGlobalSetting\Test-TargetResource.DNS Client Global Settings all parameters are the same.should call expected Mocks" time="0.033" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DNS Client Global Settings SuffixSearchList is different" executed="True" result="Success" success="True" time="0.1259" asserts="0" description="DNS Client Global Settings SuffixSearchList is different">
                <results>
                  <test-case description="should return false" name="MSFT_xDnsClientGlobalSetting\Test-TargetResource.DNS Client Global Settings SuffixSearchList is different.should return false" time="0.0953" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xDnsClientGlobalSetting\Test-TargetResource.DNS Client Global Settings SuffixSearchList is different.should call expected Mocks" time="0.0306" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DNS Client Global Settings SuffixSearchList Array is different" executed="True" result="Success" success="True" time="0.1683" asserts="0" description="DNS Client Global Settings SuffixSearchList Array is different">
                <results>
                  <test-case description="should return false" name="MSFT_xDnsClientGlobalSetting\Test-TargetResource.DNS Client Global Settings SuffixSearchList Array is different.should return false" time="0.1296" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xDnsClientGlobalSetting\Test-TargetResource.DNS Client Global Settings SuffixSearchList Array is different.should call expected Mocks" time="0.0387" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DNS Client Global Settings SuffixSearchList Array Order is same" executed="True" result="Success" success="True" time="0.1607" asserts="0" description="DNS Client Global Settings SuffixSearchList Array Order is same">
                <results>
                  <test-case description="should return true" name="MSFT_xDnsClientGlobalSetting\Test-TargetResource.DNS Client Global Settings SuffixSearchList Array Order is same.should return true" time="0.1257" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xDnsClientGlobalSetting\Test-TargetResource.DNS Client Global Settings SuffixSearchList Array Order is same.should call expected Mocks" time="0.0351" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DNS Client Global Settings SuffixSearchList Array Order is different" executed="True" result="Success" success="True" time="0.1888" asserts="0" description="DNS Client Global Settings SuffixSearchList Array Order is different">
                <results>
                  <test-case description="should return false" name="MSFT_xDnsClientGlobalSetting\Test-TargetResource.DNS Client Global Settings SuffixSearchList Array Order is different.should return false" time="0.1183" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xDnsClientGlobalSetting\Test-TargetResource.DNS Client Global Settings SuffixSearchList Array Order is different.should call expected Mocks" time="0.0705" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DNS Client Global Settings DevolutionLevel is different" executed="True" result="Success" success="True" time="0.1261" asserts="0" description="DNS Client Global Settings DevolutionLevel is different">
                <results>
                  <test-case description="should return false" name="MSFT_xDnsClientGlobalSetting\Test-TargetResource.DNS Client Global Settings DevolutionLevel is different.should return false" time="0.0939" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xDnsClientGlobalSetting\Test-TargetResource.DNS Client Global Settings DevolutionLevel is different.should call expected Mocks" time="0.0322" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="DNS Client Global Settings UseDevolution is different" executed="True" result="Success" success="True" time="0.1304" asserts="0" description="DNS Client Global Settings UseDevolution is different">
                <results>
                  <test-case description="should return false" name="MSFT_xDnsClientGlobalSetting\Test-TargetResource.DNS Client Global Settings UseDevolution is different.should return false" time="0.0886" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xDnsClientGlobalSetting\Test-TargetResource.DNS Client Global Settings UseDevolution is different.should call expected Mocks" time="0.0418" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xDnsConnectionSuffix.Tests.ps1" executed="True" result="Success" success="True" time="1.3877" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xDnsConnectionSuffix.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MSFT_xDnsConnectionSuffix\Get-TargetResource" executed="True" result="Success" success="True" time="0.5518" asserts="0" description="MSFT_xDnsConnectionSuffix\Get-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Validates &quot;Get-TargetResource&quot; method" executed="True" result="Success" success="True" time="0.5518" asserts="0" description="Validates &quot;Get-TargetResource&quot; method">
                <results>
                  <test-case description="Returns a &quot;System.Collections.Hashtable&quot; object type" name="MSFT_xDnsConnectionSuffix\Get-TargetResource.Validates &quot;Get-TargetResource&quot; method.Returns a &quot;System.Collections.Hashtable&quot; object type" time="0.2702" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns &quot;Present&quot; when DNS suffix matches and &quot;Ensure&quot; = &quot;Present&quot;" name="MSFT_xDnsConnectionSuffix\Get-TargetResource.Validates &quot;Get-TargetResource&quot; method.Returns &quot;Present&quot; when DNS suffix matches and &quot;Ensure&quot; = &quot;Present&quot;" time="0.052" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns &quot;Absent&quot; when DNS suffix does not match and &quot;Ensure&quot; = &quot;Present&quot;" name="MSFT_xDnsConnectionSuffix\Get-TargetResource.Validates &quot;Get-TargetResource&quot; method.Returns &quot;Absent&quot; when DNS suffix does not match and &quot;Ensure&quot; = &quot;Present&quot;" time="0.0697" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns &quot;Absent&quot; when no DNS suffix is defined and &quot;Ensure&quot; = &quot;Present&quot;" name="MSFT_xDnsConnectionSuffix\Get-TargetResource.Validates &quot;Get-TargetResource&quot; method.Returns &quot;Absent&quot; when no DNS suffix is defined and &quot;Ensure&quot; = &quot;Present&quot;" time="0.0571" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns &quot;Absent&quot; when no DNS suffix is defined and &quot;Ensure&quot; = &quot;Absent&quot;" name="MSFT_xDnsConnectionSuffix\Get-TargetResource.Validates &quot;Get-TargetResource&quot; method.Returns &quot;Absent&quot; when no DNS suffix is defined and &quot;Ensure&quot; = &quot;Absent&quot;" time="0.0524" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Returns &quot;Present&quot; when DNS suffix is defined and &quot;Ensure&quot; = &quot;Absent&quot;" name="MSFT_xDnsConnectionSuffix\Get-TargetResource.Validates &quot;Get-TargetResource&quot; method.Returns &quot;Present&quot; when DNS suffix is defined and &quot;Ensure&quot; = &quot;Absent&quot;" time="0.0504" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xDnsConnectionSuffix\Test-TargetResource" executed="True" result="Success" success="True" time="0.603" asserts="0" description="MSFT_xDnsConnectionSuffix\Test-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Validates &quot;Test-TargetResource&quot; method" executed="True" result="Success" success="True" time="0.603" asserts="0" description="Validates &quot;Test-TargetResource&quot; method">
                <results>
                  <test-case description="Passes when all properties match and &quot;Ensure&quot; = &quot;Present&quot;" name="MSFT_xDnsConnectionSuffix\Test-TargetResource.Validates &quot;Test-TargetResource&quot; method.Passes when all properties match and &quot;Ensure&quot; = &quot;Present&quot;" time="0.1405" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when no DNS suffix is registered and &quot;Ensure&quot; = &quot;Absent&quot;" name="MSFT_xDnsConnectionSuffix\Test-TargetResource.Validates &quot;Test-TargetResource&quot; method.Passes when no DNS suffix is registered and &quot;Ensure&quot; = &quot;Absent&quot;" time="0.0812" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when &quot;RegisterThisConnectionsAddress&quot; setting is correct" name="MSFT_xDnsConnectionSuffix\Test-TargetResource.Validates &quot;Test-TargetResource&quot; method.Passes when &quot;RegisterThisConnectionsAddress&quot; setting is correct" time="0.0466" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Passes when &quot;UseSuffixWhenRegistering&quot; setting is correct" name="MSFT_xDnsConnectionSuffix\Test-TargetResource.Validates &quot;Test-TargetResource&quot; method.Passes when &quot;UseSuffixWhenRegistering&quot; setting is correct" time="0.0539" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when no DNS suffix is registered and &quot;Ensure&quot; = &quot;Present&quot;" name="MSFT_xDnsConnectionSuffix\Test-TargetResource.Validates &quot;Test-TargetResource&quot; method.Fails when no DNS suffix is registered and &quot;Ensure&quot; = &quot;Present&quot;" time="0.0549" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when the registered DNS suffix is incorrect and &quot;Ensure&quot; = &quot;Present&quot;" name="MSFT_xDnsConnectionSuffix\Test-TargetResource.Validates &quot;Test-TargetResource&quot; method.Fails when the registered DNS suffix is incorrect and &quot;Ensure&quot; = &quot;Present&quot;" time="0.0629" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when a DNS suffix is registered and &quot;Ensure&quot; = &quot;Absent&quot;" name="MSFT_xDnsConnectionSuffix\Test-TargetResource.Validates &quot;Test-TargetResource&quot; method.Fails when a DNS suffix is registered and &quot;Ensure&quot; = &quot;Absent&quot;" time="0.059" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when &quot;RegisterThisConnectionsAddress&quot; setting is incorrect" name="MSFT_xDnsConnectionSuffix\Test-TargetResource.Validates &quot;Test-TargetResource&quot; method.Fails when &quot;RegisterThisConnectionsAddress&quot; setting is incorrect" time="0.0541" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Fails when &quot;UseSuffixWhenRegistering&quot; setting is incorrect" name="MSFT_xDnsConnectionSuffix\Test-TargetResource.Validates &quot;Test-TargetResource&quot; method.Fails when &quot;UseSuffixWhenRegistering&quot; setting is incorrect" time="0.0499" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xDnsConnectionSuffix\Test-TargetResource" executed="True" result="Success" success="True" time="0.2328" asserts="0" description="MSFT_xDnsConnectionSuffix\Test-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Validates &quot;Set-TargetResource&quot; method" executed="True" result="Success" success="True" time="0.2328" asserts="0" description="Validates &quot;Set-TargetResource&quot; method">
                <results>
                  <test-case description="Calls &quot;Set-DnsClient&quot; with specified DNS suffix when &quot;Ensure&quot; = &quot;Present&quot;" name="MSFT_xDnsConnectionSuffix\Test-TargetResource.Validates &quot;Set-TargetResource&quot; method.Calls &quot;Set-DnsClient&quot; with specified DNS suffix when &quot;Ensure&quot; = &quot;Present&quot;" time="0.1672" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Calls &quot;Set-DnsClient&quot; with no DNS suffix when &quot;Ensure&quot; = &quot;Absent&quot;" name="MSFT_xDnsConnectionSuffix\Test-TargetResource.Validates &quot;Set-TargetResource&quot; method.Calls &quot;Set-DnsClient&quot; with no DNS suffix when &quot;Ensure&quot; = &quot;Absent&quot;" time="0.0656" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xDNSServerAddress.Tests.ps1" executed="True" result="Success" success="True" time="4.5088" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xDNSServerAddress.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MSFT_xDNSServerAddress\Get-TargetResource" executed="True" result="Success" success="True" time="0.4618" asserts="0" description="MSFT_xDNSServerAddress\Get-TargetResource">
            <results>
              <test-suite type="TestFixture" name="invoking with an IPv4 address" executed="True" result="Success" success="True" time="0.3105" asserts="0" description="invoking with an IPv4 address">
                <results>
                  <test-case description="should return true" name="MSFT_xDNSServerAddress\Get-TargetResource.invoking with an IPv4 address.should return true" time="0.3105" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with an IPv6 address" executed="True" result="Success" success="True" time="0.1513" asserts="0" description="invoking with an IPv6 address">
                <results>
                  <test-case description="should return true" name="MSFT_xDNSServerAddress\Get-TargetResource.invoking with an IPv6 address.should return true" time="0.1513" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xDNSServerAddress\Set-TargetResource" executed="True" result="Success" success="True" time="2.277" asserts="0" description="MSFT_xDNSServerAddress\Set-TargetResource">
            <results>
              <test-suite type="TestFixture" name="invoking with single IPv4 Server Address that is the same as current" executed="True" result="Success" success="True" time="0.2882" asserts="0" description="invoking with single IPv4 Server Address that is the same as current">
                <results>
                  <test-case description="should not throw an exception" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with single IPv4 Server Address that is the same as current.should not throw an exception" time="0.2421" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with single IPv4 Server Address that is the same as current.should call all the mocks" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with single IPv4 Server Address that is different to current" executed="True" result="Success" success="True" time="0.2629" asserts="0" description="invoking with single IPv4 Server Address that is different to current">
                <results>
                  <test-case description="should not throw an exception" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with single IPv4 Server Address that is different to current.should not throw an exception" time="0.1734" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with single IPv4 Server Address that is different to current.should call all the mocks" time="0.0894" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with single IPv4 Server Address that is different to current and validate true" executed="True" result="Success" success="True" time="0.2267" asserts="0" description="invoking with single IPv4 Server Address that is different to current and validate true">
                <results>
                  <test-case description="should not throw an exception" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with single IPv4 Server Address that is different to current and validate true.should not throw an exception" time="0.1425" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with single IPv4 Server Address that is different to current and validate true.should call all the mocks" time="0.0842" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with multiple IPv4 Server Addresses that are different to current" executed="True" result="Success" success="True" time="0.1893" asserts="0" description="invoking with multiple IPv4 Server Addresses that are different to current">
                <results>
                  <test-case description="should not throw an exception" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with multiple IPv4 Server Addresses that are different to current.should not throw an exception" time="0.1363" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with multiple IPv4 Server Addresses that are different to current.should call all the mocks" time="0.0529" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with multiple IPv4 Server Addresses When there are no address assiged" executed="True" result="Success" success="True" time="0.302" asserts="0" description="invoking with multiple IPv4 Server Addresses When there are no address assiged">
                <results>
                  <test-case description="should not throw an exception" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with multiple IPv4 Server Addresses When there are no address assiged.should not throw an exception" time="0.1443" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with multiple IPv4 Server Addresses When there are no address assiged.should call all the mocks" time="0.1577" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with single IPv6 Server Address that is the same as current" executed="True" result="Success" success="True" time="0.2494" asserts="0" description="invoking with single IPv6 Server Address that is the same as current">
                <results>
                  <test-case description="should not throw an exception" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with single IPv6 Server Address that is the same as current.should not throw an exception" time="0.1784" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with single IPv6 Server Address that is the same as current.should call all the mocks" time="0.071" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with single IPv6 Server Address that is different to current" executed="True" result="Success" success="True" time="0.2091" asserts="0" description="invoking with single IPv6 Server Address that is different to current">
                <results>
                  <test-case description="should not throw an exception" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with single IPv6 Server Address that is different to current.should not throw an exception" time="0.1413" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with single IPv6 Server Address that is different to current.should call all the mocks" time="0.0678" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with single IPv6 Server Address that is different to current and validate true" executed="True" result="Success" success="True" time="0.1815" asserts="0" description="invoking with single IPv6 Server Address that is different to current and validate true">
                <results>
                  <test-case description="should not throw an exception" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with single IPv6 Server Address that is different to current and validate true.should not throw an exception" time="0.1187" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with single IPv6 Server Address that is different to current and validate true.should call all the mocks" time="0.0628" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with multiple IPv6 Server Addresses that are different to current" executed="True" result="Success" success="True" time="0.1795" asserts="0" description="invoking with multiple IPv6 Server Addresses that are different to current">
                <results>
                  <test-case description="should not throw an exception" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with multiple IPv6 Server Addresses that are different to current.should not throw an exception" time="0.1105" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with multiple IPv6 Server Addresses that are different to current.should call all the mocks" time="0.069" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with multiple IPv6 Server Addresses When there are no address assiged" executed="True" result="Success" success="True" time="0.1885" asserts="0" description="invoking with multiple IPv6 Server Addresses When there are no address assiged">
                <results>
                  <test-case description="should not throw an exception" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with multiple IPv6 Server Addresses When there are no address assiged.should not throw an exception" time="0.1165" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Set-TargetResource.invoking with multiple IPv6 Server Addresses When there are no address assiged.should call all the mocks" time="0.0719" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xDNSServerAddress\Test-TargetResource" executed="True" result="Success" success="True" time="1.2425" asserts="0" description="MSFT_xDNSServerAddress\Test-TargetResource">
            <results>
              <test-suite type="TestFixture" name="invoking with single IPv4 Server Address that is the same as current" executed="True" result="Success" success="True" time="0.2358" asserts="0" description="invoking with single IPv4 Server Address that is the same as current">
                <results>
                  <test-case description="should return true" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with single IPv4 Server Address that is the same as current.should return true" time="0.2039" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with single IPv4 Server Address that is the same as current.should call all the mocks" time="0.0319" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with single IPv4 Server Address that is different to current" executed="True" result="Success" success="True" time="0.1364" asserts="0" description="invoking with single IPv4 Server Address that is different to current">
                <results>
                  <test-case description="should return false" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with single IPv4 Server Address that is different to current.should return false" time="0.0915" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with single IPv4 Server Address that is different to current.should call all the mocks" time="0.0448" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with multiple IPv4 Server Addresses that are different to current" executed="True" result="Success" success="True" time="0.149" asserts="0" description="invoking with multiple IPv4 Server Addresses that are different to current">
                <results>
                  <test-case description="should return false" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with multiple IPv4 Server Addresses that are different to current.should return false" time="0.1171" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with multiple IPv4 Server Addresses that are different to current.should call all the mocks" time="0.032" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with multiple IPv4 Server Addresses that are no addresses assigned" executed="True" result="Success" success="True" time="0.1359" asserts="0" description="invoking with multiple IPv4 Server Addresses that are no addresses assigned">
                <results>
                  <test-case description="should return false" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with multiple IPv4 Server Addresses that are no addresses assigned.should return false" time="0.1034" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with multiple IPv4 Server Addresses that are no addresses assigned.should call all the mocks" time="0.0324" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with single IPv6 Server Address that is the same as current" executed="True" result="Success" success="True" time="0.135" asserts="0" description="invoking with single IPv6 Server Address that is the same as current">
                <results>
                  <test-case description="should return true" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with single IPv6 Server Address that is the same as current.should return true" time="0.103" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with single IPv6 Server Address that is the same as current.should call all the mocks" time="0.0321" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with single IPv6 Server Address that is different to current" executed="True" result="Success" success="True" time="0.1568" asserts="0" description="invoking with single IPv6 Server Address that is different to current">
                <results>
                  <test-case description="should return false" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with single IPv6 Server Address that is different to current.should return false" time="0.1211" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with single IPv6 Server Address that is different to current.should call all the mocks" time="0.0357" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with multiple IPv6 Server Addresses that are different to current" executed="True" result="Success" success="True" time="0.142" asserts="0" description="invoking with multiple IPv6 Server Addresses that are different to current">
                <results>
                  <test-case description="should return false" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with multiple IPv6 Server Addresses that are different to current.should return false" time="0.1045" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with multiple IPv6 Server Addresses that are different to current.should call all the mocks" time="0.0375" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with multiple IPv6 Server Addresses that are no addresses assigned" executed="True" result="Success" success="True" time="0.1516" asserts="0" description="invoking with multiple IPv6 Server Addresses that are no addresses assigned">
                <results>
                  <test-case description="should return false" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with multiple IPv6 Server Addresses that are no addresses assigned.should return false" time="0.1105" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xDNSServerAddress\Test-TargetResource.invoking with multiple IPv6 Server Addresses that are no addresses assigned.should call all the mocks" time="0.0411" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xDNSServerAddress\Assert-ResourceProperty" executed="True" result="Success" success="True" time="0.5276" asserts="0" description="MSFT_xDNSServerAddress\Assert-ResourceProperty">
            <results>
              <test-suite type="TestFixture" name="invoking with bad interface alias" executed="True" result="Success" success="True" time="0.1453" asserts="0" description="invoking with bad interface alias">
                <results>
                  <test-case description="should throw an InterfaceNotAvailable error" name="MSFT_xDNSServerAddress\Assert-ResourceProperty.invoking with bad interface alias.should throw an InterfaceNotAvailable error" time="0.1453" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with invalid IP Address" executed="True" result="Success" success="True" time="0.0838" asserts="0" description="invoking with invalid IP Address">
                <results>
                  <test-case description="should throw an AddressFormatError error" name="MSFT_xDNSServerAddress\Assert-ResourceProperty.invoking with invalid IP Address.should throw an AddressFormatError error" time="0.0838" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with IPv4 Address and family mismatch" executed="True" result="Success" success="True" time="0.077" asserts="0" description="invoking with IPv4 Address and family mismatch">
                <results>
                  <test-case description="should throw an AddressMismatchError error" name="MSFT_xDNSServerAddress\Assert-ResourceProperty.invoking with IPv4 Address and family mismatch.should throw an AddressMismatchError error" time="0.077" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with IPv6 Address and family mismatch" executed="True" result="Success" success="True" time="0.0745" asserts="0" description="invoking with IPv6 Address and family mismatch">
                <results>
                  <test-case description="should throw an AddressMismatchError error" name="MSFT_xDNSServerAddress\Assert-ResourceProperty.invoking with IPv6 Address and family mismatch.should throw an AddressMismatchError error" time="0.0745" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with valid IPv4 Addresses" executed="True" result="Success" success="True" time="0.077" asserts="0" description="invoking with valid IPv4 Addresses">
                <results>
                  <test-case description="should not throw an error" name="MSFT_xDNSServerAddress\Assert-ResourceProperty.invoking with valid IPv4 Addresses.should not throw an error" time="0.077" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with valid IPv6 Addresses" executed="True" result="Success" success="True" time="0.0701" asserts="0" description="invoking with valid IPv6 Addresses">
                <results>
                  <test-case description="should not throw an error" name="MSFT_xDNSServerAddress\Assert-ResourceProperty.invoking with valid IPv6 Addresses.should not throw an error" time="0.0701" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xFirewall.Tests.ps1" executed="True" result="Failure" success="False" time="23.096" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xFirewall.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MSFT_xFirewall\Get-TargetResource" executed="True" result="Failure" success="False" time="7.4777" asserts="0" description="MSFT_xFirewall\Get-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Absent should return correctly" executed="True" result="Success" success="True" time="4.5167" asserts="0" description="Absent should return correctly">
                <results>
                  <test-case description="Should return absent on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Absent should return correctly.Should return absent on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="4.5167" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Present should return correctly" executed="True" result="Failure" success="False" time="2.961" asserts="0" description="Present should return correctly">
                <results>
                  <test-case description="should have the correct Name on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct Name on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="1.8894" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct DisplayName on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct DisplayName on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0312" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct Group on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct Group on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0289" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct DisplayGroup on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct DisplayGroup on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0901" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct Enabled on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct Enabled on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0347" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct Action on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct Action on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.037" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct Profile on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct Profile on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.058" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {Domain, Private, Public}
But was:  {Domain,Private,Public}</message>
                      <stack-trace>at line: 75 in C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xFirewall.Tests.ps1
75:                         $parameterNew | Should Be $parameterValue
</stack-trace>
                    </failure>
                  </test-case>
                  <test-case description="should have the correct Direction on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct Direction on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0419" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct Description on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct Description on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0305" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct RemotePort on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct RemotePort on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0377" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct LocalPort on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct LocalPort on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.033" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct Protocol on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct Protocol on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0281" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct Program on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct Program on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0291" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct Service on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct Service on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0304" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct Authentication on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct Authentication on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0348" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct Encryption on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct Encryption on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0384" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct InterfaceAlias on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct InterfaceAlias on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0327" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct InterfaceType on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct InterfaceType on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0306" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct LocalAddress on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct LocalAddress on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0229" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct LocalUser on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct LocalUser on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0275" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct Package on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct Package on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0301" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct Platform on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct Platform on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0351" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct RemoteAddress on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct RemoteAddress on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0268" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct RemoteMachine on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct RemoteMachine on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.032" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct RemoteUser on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct RemoteUser on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.03" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct DynamicTransport on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct DynamicTransport on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0359" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct EdgeTraversalPolicy on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct EdgeTraversalPolicy on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.037" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct IcmpType on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct IcmpType on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0294" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct LocalOnlyMapping on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct LocalOnlyMapping on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0316" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct LooseSourceMapping on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct LooseSourceMapping on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0329" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct OverrideBlockRules on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct OverrideBlockRules on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0287" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should have the correct Owner on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-TargetResource.Present should return correctly.should have the correct Owner on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0245" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xFirewall\Test-TargetResource" executed="True" result="Success" success="True" time="1.4574" asserts="0" description="MSFT_xFirewall\Test-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Ensure is Absent and the Firewall is not Present" executed="True" result="Success" success="True" time="0.1498" asserts="0" description="Ensure is Absent and the Firewall is not Present">
                <results>
                  <test-case description="should return True on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-TargetResource.Ensure is Absent and the Firewall is not Present.should return True on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1498" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Absent and the Firewall is Present" executed="True" result="Success" success="True" time="0.4059" asserts="0" description="Ensure is Absent and the Firewall is Present">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-TargetResource.Ensure is Absent and the Firewall is Present.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.4059" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall is Present and properties match" executed="True" result="Success" success="True" time="0.3905" asserts="0" description="Ensure is Present and the Firewall is Present and properties match">
                <results>
                  <test-case description="should return True on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-TargetResource.Ensure is Present and the Firewall is Present and properties match.should return True on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.3905" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall is Present and properties are different" executed="True" result="Success" success="True" time="0.405" asserts="0" description="Ensure is Present and the Firewall is Present and properties are different">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-TargetResource.Ensure is Present and the Firewall is Present and properties are different.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.405" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall is Absent" executed="True" result="Success" success="True" time="0.1063" asserts="0" description="Ensure is Present and the Firewall is Absent">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-TargetResource.Ensure is Present and the Firewall is Absent.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1063" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xFirewall\Set-TargetResource" executed="True" result="Success" success="True" time="5.6431" asserts="0" description="MSFT_xFirewall\Set-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Ensure is Absent and Firewall Exist" executed="True" result="Success" success="True" time="0.2233" asserts="0" description="Ensure is Absent and Firewall Exist">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Absent and Firewall Exist.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.2233" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Absent and the Firewall Does Not Exist" executed="True" result="Success" success="True" time="0.0905" asserts="0" description="Ensure is Absent and the Firewall Does Not Exist">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Absent and the Firewall Does Not Exist.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.0905" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Not Exist" executed="True" result="Success" success="True" time="0.1451" asserts="0" description="Ensure is Present and the Firewall Does Not Exist">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Not Exist.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1451" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different DisplayName" executed="True" result="Success" success="True" time="0.1684" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different DisplayName">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different DisplayName.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1684" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different Group" executed="True" result="Success" success="True" time="0.1913" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different Group">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different Group.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1913" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different Enabled" executed="True" result="Success" success="True" time="0.1797" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different Enabled">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different Enabled.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1797" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different Action" executed="True" result="Success" success="True" time="0.1579" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different Action">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different Action.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1579" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different Profile" executed="True" result="Success" success="True" time="0.1566" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different Profile">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different Profile.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1566" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different Direction" executed="True" result="Success" success="True" time="0.1558" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different Direction">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different Direction.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1558" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different RemotePort" executed="True" result="Success" success="True" time="0.1486" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different RemotePort">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different RemotePort.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1486" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different LocalPort" executed="True" result="Success" success="True" time="0.1497" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different LocalPort">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different LocalPort.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1497" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different Protocol" executed="True" result="Success" success="True" time="0.1581" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different Protocol">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different Protocol.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1581" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different Description" executed="True" result="Success" success="True" time="0.173" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different Description">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different Description.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.173" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different Program" executed="True" result="Success" success="True" time="0.1481" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different Program">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different Program.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1481" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different Service" executed="True" result="Success" success="True" time="0.1529" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different Service">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different Service.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1529" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different Authentication" executed="True" result="Success" success="True" time="0.1579" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different Authentication">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different Authentication.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1579" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different Encryption" executed="True" result="Success" success="True" time="0.1576" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different Encryption">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different Encryption.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1576" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different InterfaceAlias" executed="True" result="Success" success="True" time="0.1509" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different InterfaceAlias">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different InterfaceAlias.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1509" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different InterfaceType" executed="True" result="Success" success="True" time="0.1529" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different InterfaceType">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different InterfaceType.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1529" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different LocalAddress" executed="True" result="Success" success="True" time="0.1689" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different LocalAddress">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different LocalAddress.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1689" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different LocalUser" executed="True" result="Success" success="True" time="0.1722" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different LocalUser">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different LocalUser.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1722" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different Package" executed="True" result="Success" success="True" time="0.1593" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different Package">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different Package.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1593" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different Platform" executed="True" result="Success" success="True" time="0.1558" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different Platform">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different Platform.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1558" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different RemoteAddress" executed="True" result="Success" success="True" time="0.1523" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different RemoteAddress">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different RemoteAddress.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1523" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different RemoteMachine" executed="True" result="Success" success="True" time="0.1455" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different RemoteMachine">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different RemoteMachine.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1455" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different RemoteUser" executed="True" result="Success" success="True" time="0.1865" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different RemoteUser">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different RemoteUser.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1865" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different DynamicTransport" executed="True" result="Success" success="True" time="0.1608" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different DynamicTransport">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different DynamicTransport.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1608" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different EdgeTraversalPolicy" executed="True" result="Success" success="True" time="0.1592" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different EdgeTraversalPolicy">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different EdgeTraversalPolicy.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1592" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different IcmpType" executed="True" result="Success" success="True" time="0.1526" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different IcmpType">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different IcmpType.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1526" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different LocalOnlyMapping" executed="True" result="Success" success="True" time="0.1595" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different LocalOnlyMapping">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different LocalOnlyMapping.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1595" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different LooseSourceMapping" executed="True" result="Success" success="True" time="0.2179" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different LooseSourceMapping">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different LooseSourceMapping.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.2179" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different OverrideBlockRules" executed="True" result="Success" success="True" time="0.1921" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different OverrideBlockRules">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different OverrideBlockRules.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1921" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist but has a different Owner" executed="True" result="Success" success="True" time="0.2576" asserts="0" description="Ensure is Present and the Firewall Does Exist but has a different Owner">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist but has a different Owner.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.2576" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Ensure is Present and the Firewall Does Exist and is the same" executed="True" result="Success" success="True" time="0.1843" asserts="0" description="Ensure is Present and the Firewall Does Exist and is the same">
                <results>
                  <test-case description="should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Set-TargetResource.Ensure is Present and the Firewall Does Exist and is the same.should call expected mocks on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1843" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xFirewall\Test-RuleProperties" executed="True" result="Success" success="True" time="4.2831" asserts="0" description="MSFT_xFirewall\Test-RuleProperties">
            <results>
              <test-suite type="TestFixture" name="testing with a rule with no property differences" executed="True" result="Success" success="True" time="0.2487" asserts="0" description="testing with a rule with no property differences">
                <results>
                  <test-case description="should return True on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with no property differences.should return True on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.2487" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different name" executed="True" result="Success" success="True" time="0.1375" asserts="0" description="testing with a rule with a different name">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different name.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1375" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different displayname" executed="True" result="Success" success="True" time="0.1163" asserts="0" description="testing with a rule with a different displayname">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different displayname.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1163" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different group" executed="True" result="Success" success="True" time="0.1135" asserts="0" description="testing with a rule with a different group">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different group.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1135" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different enabled" executed="True" result="Success" success="True" time="0.1212" asserts="0" description="testing with a rule with a different enabled">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different enabled.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1212" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different action" executed="True" result="Success" success="True" time="0.1248" asserts="0" description="testing with a rule with a different action">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different action.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1248" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different profile" executed="True" result="Success" success="True" time="0.1149" asserts="0" description="testing with a rule with a different profile">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different profile.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1149" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different direction" executed="True" result="Success" success="True" time="0.1087" asserts="0" description="testing with a rule with a different direction">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different direction.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1087" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different remote port" executed="True" result="Success" success="True" time="0.1214" asserts="0" description="testing with a rule with a different remote port">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different remote port.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1214" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different local port" executed="True" result="Success" success="True" time="0.1159" asserts="0" description="testing with a rule with a different local port">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different local port.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1159" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different protocol" executed="True" result="Success" success="True" time="0.1219" asserts="0" description="testing with a rule with a different protocol">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different protocol.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1219" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different description" executed="True" result="Success" success="True" time="0.129" asserts="0" description="testing with a rule with a different description">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different description.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.129" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different program" executed="True" result="Success" success="True" time="0.1188" asserts="0" description="testing with a rule with a different program">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different program.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1188" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different service" executed="True" result="Success" success="True" time="0.1089" asserts="0" description="testing with a rule with a different service">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different service.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1089" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different Authentication" executed="True" result="Success" success="True" time="0.1207" asserts="0" description="testing with a rule with a different Authentication">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different Authentication.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1207" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different Encryption" executed="True" result="Success" success="True" time="0.1137" asserts="0" description="testing with a rule with a different Encryption">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different Encryption.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1137" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different InterfaceAlias" executed="True" result="Success" success="True" time="0.1121" asserts="0" description="testing with a rule with a different InterfaceAlias">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different InterfaceAlias.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1121" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different InterfaceType" executed="True" result="Success" success="True" time="0.1123" asserts="0" description="testing with a rule with a different InterfaceType">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different InterfaceType.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1123" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different LocalAddress" executed="True" result="Success" success="True" time="0.1236" asserts="0" description="testing with a rule with a different LocalAddress">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different LocalAddress.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1236" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different LocalUser" executed="True" result="Success" success="True" time="0.1548" asserts="0" description="testing with a rule with a different LocalUser">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different LocalUser.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1548" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different Package" executed="True" result="Success" success="True" time="0.193" asserts="0" description="testing with a rule with a different Package">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different Package.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.193" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different Platform" executed="True" result="Success" success="True" time="0.1217" asserts="0" description="testing with a rule with a different Platform">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different Platform.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1217" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different RemoteAddress" executed="True" result="Success" success="True" time="0.1154" asserts="0" description="testing with a rule with a different RemoteAddress">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different RemoteAddress.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1154" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different RemoteMachine" executed="True" result="Success" success="True" time="0.1165" asserts="0" description="testing with a rule with a different RemoteMachine">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different RemoteMachine.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1165" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different RemoteUser" executed="True" result="Success" success="True" time="0.109" asserts="0" description="testing with a rule with a different RemoteUser">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different RemoteUser.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.109" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different DynamicTransport" executed="True" result="Success" success="True" time="0.1148" asserts="0" description="testing with a rule with a different DynamicTransport">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different DynamicTransport.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1148" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different EdgeTraversalPolicy" executed="True" result="Success" success="True" time="0.1199" asserts="0" description="testing with a rule with a different EdgeTraversalPolicy">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different EdgeTraversalPolicy.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1199" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different IcmpType" executed="True" result="Success" success="True" time="0.1284" asserts="0" description="testing with a rule with a different IcmpType">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different IcmpType.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1284" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different LocalOnlyMapping" executed="True" result="Success" success="True" time="0.1242" asserts="0" description="testing with a rule with a different LocalOnlyMapping">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different LocalOnlyMapping.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1242" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different LooseSourceMapping" executed="True" result="Success" success="True" time="0.3569" asserts="0" description="testing with a rule with a different LooseSourceMapping">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different LooseSourceMapping.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.3569" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different OverrideBlockRules" executed="True" result="Success" success="True" time="0.1179" asserts="0" description="testing with a rule with a different OverrideBlockRules">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different OverrideBlockRules.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1179" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with a rule with a different Owner" executed="True" result="Success" success="True" time="0.1267" asserts="0" description="testing with a rule with a different Owner">
                <results>
                  <test-case description="should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Test-RuleProperties.testing with a rule with a different Owner.should return False on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1267" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xFirewall\Get-FirewallRule" executed="True" result="Success" success="True" time="0.8705" asserts="0" description="MSFT_xFirewall\Get-FirewallRule">
            <results>
              <test-suite type="TestFixture" name="testing with firewall that exists" executed="True" result="Success" success="True" time="0.4324" asserts="0" description="testing with firewall that exists">
                <results>
                  <test-case description="should return a firewall rule when name is passed on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-FirewallRule.testing with firewall that exists.should return a firewall rule when name is passed on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.4324" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with firewall that does not exist" executed="True" result="Success" success="True" time="0.3316" asserts="0" description="testing with firewall that does not exist">
                <results>
                  <test-case description="should not return anything on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-FirewallRule.testing with firewall that does not exist.should not return anything on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.3316" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="testing with firewall that somehow occurs more than once" executed="True" result="Success" success="True" time="0.1064" asserts="0" description="testing with firewall that somehow occurs more than once">
                <results>
                  <test-case description="should throw RuleNotUnique exception on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-FirewallRule.testing with firewall that somehow occurs more than once.should throw RuleNotUnique exception on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1064" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xFirewall\Get-FirewallRuleProperty" executed="True" result="Success" success="True" time="3.3642" asserts="0" description="MSFT_xFirewall\Get-FirewallRuleProperty">
            <results>
              <test-suite type="TestFixture" name="All Properties" executed="True" result="Success" success="True" time="3.3642" asserts="0" description="All Properties">
                <results>
                  <test-case description="Should return the right address filter on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-FirewallRuleProperty.All Properties.Should return the right address filter on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="1.31" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the right application filter on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-FirewallRuleProperty.All Properties.Should return the right application filter on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1127" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the right interface filter on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-FirewallRuleProperty.All Properties.Should return the right interface filter on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1287" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the right interface type filter on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-FirewallRuleProperty.All Properties.Should return the right interface type filter on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1065" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the right port filter on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-FirewallRuleProperty.All Properties.Should return the right port filter on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.111" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the right Profile on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-FirewallRuleProperty.All Properties.Should return the right Profile on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.7351" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the right Profile on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-FirewallRuleProperty.All Properties.Should return the right Profile on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.635" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the right Security Filters on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-FirewallRuleProperty.All Properties.Should return the right Security Filters on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1157" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should return the right Service Filters on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" name="MSFT_xFirewall\Get-FirewallRuleProperty.All Properties.Should return the right Service Filters on firewall rule {029B53B6-839B-46C0-B16D-9E159DE8CD97}" time="0.1094" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xHostsFile.Tests.ps1" executed="True" result="Success" success="True" time="1.5451" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xHostsFile.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MSFT_xHostsFile" executed="True" result="Success" success="True" time="1.5451" asserts="0" description="MSFT_xHostsFile">
            <results>
              <test-suite type="TestFixture" name="A host entry doesn't exist, and should" executed="True" result="Success" success="True" time="0.4381" asserts="0" description="A host entry doesn't exist, and should">
                <results>
                  <test-case description="should return absent from the get method" name="MSFT_xHostsFile.A host entry doesn't exist, and should.should return absent from the get method" time="0.3263" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should return false from the test method" name="MSFT_xHostsFile.A host entry doesn't exist, and should.should return false from the test method" time="0.0416" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should create the entry in the set method" name="MSFT_xHostsFile.A host entry doesn't exist, and should.should create the entry in the set method" time="0.0702" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="A host entry exists but has the wrong IP address" executed="True" result="Success" success="True" time="0.2429" asserts="0" description="A host entry exists but has the wrong IP address">
                <results>
                  <test-case description="should return present from the get method" name="MSFT_xHostsFile.A host entry exists but has the wrong IP address.should return present from the get method" time="0.1076" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should return false from the test method" name="MSFT_xHostsFile.A host entry exists but has the wrong IP address.should return false from the test method" time="0.0356" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should update the entry in the set method" name="MSFT_xHostsFile.A host entry exists but has the wrong IP address.should update the entry in the set method" time="0.0998" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="A host entry exists with the correct IP address" executed="True" result="Success" success="True" time="0.1244" asserts="0" description="A host entry exists with the correct IP address">
                <results>
                  <test-case description="should return present from the get method" name="MSFT_xHostsFile.A host entry exists with the correct IP address.should return present from the get method" time="0.085" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should return true from the test method" name="MSFT_xHostsFile.A host entry exists with the correct IP address.should return true from the test method" time="0.0394" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="A host entry exists but it shouldn't" executed="True" result="Success" success="True" time="0.1851" asserts="0" description="A host entry exists but it shouldn't">
                <results>
                  <test-case description="should return present from the get method" name="MSFT_xHostsFile.A host entry exists but it shouldn't.should return present from the get method" time="0.0887" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should return false from the test method" name="MSFT_xHostsFile.A host entry exists but it shouldn't.should return false from the test method" time="0.0323" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should remove the entry in the set method" name="MSFT_xHostsFile.A host entry exists but it shouldn't.should remove the entry in the set method" time="0.0641" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="A host entry doesn't it exist and shouldn't" executed="True" result="Success" success="True" time="0.1202" asserts="0" description="A host entry doesn't it exist and shouldn't">
                <results>
                  <test-case description="should return absent from the get method" name="MSFT_xHostsFile.A host entry doesn't it exist and shouldn't.should return absent from the get method" time="0.083" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should return true from the test method" name="MSFT_xHostsFile.A host entry doesn't it exist and shouldn't.should return true from the test method" time="0.0372" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="A host entry exists and is correct, but it listed with multiple entries on one line" executed="True" result="Success" success="True" time="0.1395" asserts="0" description="A host entry exists and is correct, but it listed with multiple entries on one line">
                <results>
                  <test-case description="should return present from the get method" name="MSFT_xHostsFile.A host entry exists and is correct, but it listed with multiple entries on one line.should return present from the get method" time="0.1028" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should return true from the test method" name="MSFT_xHostsFile.A host entry exists and is correct, but it listed with multiple entries on one line.should return true from the test method" time="0.0368" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="A host entry exists and is not correct, but it listed with multiple entries on one line" executed="True" result="Success" success="True" time="0.1937" asserts="0" description="A host entry exists and is not correct, but it listed with multiple entries on one line">
                <results>
                  <test-case description="should return present from the get method" name="MSFT_xHostsFile.A host entry exists and is not correct, but it listed with multiple entries on one line.should return present from the get method" time="0.0956" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should return false from the test method" name="MSFT_xHostsFile.A host entry exists and is not correct, but it listed with multiple entries on one line.should return false from the test method" time="0.0343" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should update the entry in the set method" name="MSFT_xHostsFile.A host entry exists and is not correct, but it listed with multiple entries on one line.should update the entry in the set method" time="0.0638" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Invalid parameters will throw meaningful errors" executed="True" result="Success" success="True" time="0.101" asserts="0" description="Invalid parameters will throw meaningful errors">
                <results>
                  <test-case description="should throw an error when IP Address isn't provide and ensure is present" name="MSFT_xHostsFile.Invalid parameters will throw meaningful errors.should throw an error when IP Address isn't provide and ensure is present" time="0.101" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xIPAddress.Tests.ps1" executed="True" result="Success" success="True" time="2.1397" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xIPAddress.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MSFT_xIPAddress\Get-TargetResource" executed="True" result="Success" success="True" time="0.3148" asserts="0" description="MSFT_xIPAddress\Get-TargetResource">
            <results>
              <test-suite type="TestFixture" name="invoking" executed="True" result="Success" success="True" time="0.2302" asserts="0" description="invoking">
                <results>
                  <test-case description="should return existing IP details" name="MSFT_xIPAddress\Get-TargetResource.invoking.should return existing IP details" time="0.2302" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Prefix Length" executed="True" result="Success" success="True" time="0.0846" asserts="0" description="Prefix Length">
                <results>
                  <test-case description="should fail if passed a negative number" name="MSFT_xIPAddress\Get-TargetResource.Prefix Length.should fail if passed a negative number" time="0.0846" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xIPAddress\Set-TargetResource" executed="True" result="Success" success="True" time="0.3694" asserts="0" description="MSFT_xIPAddress\Set-TargetResource">
            <results>
              <test-suite type="TestFixture" name="invoking with valid IP Address" executed="True" result="Success" success="True" time="0.3694" asserts="0" description="invoking with valid IP Address">
                <results>
                  <test-case description="should rerturn $null" name="MSFT_xIPAddress\Set-TargetResource.invoking with valid IP Address.should rerturn $null" time="0.2941" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call all the mocks" name="MSFT_xIPAddress\Set-TargetResource.invoking with valid IP Address.should call all the mocks" time="0.0753" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xIPAddress\Test-TargetResource" executed="True" result="Success" success="True" time="0.7399" asserts="0" description="MSFT_xIPAddress\Test-TargetResource">
            <results>
              <test-suite type="TestFixture" name="invoking with invalid IPv4 Address" executed="True" result="Success" success="True" time="0.1678" asserts="0" description="invoking with invalid IPv4 Address">
                <results>
                  <test-case description="should throw an AddressFormatError error" name="MSFT_xIPAddress\Test-TargetResource.invoking with invalid IPv4 Address.should throw an AddressFormatError error" time="0.1678" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with different IPv4 Address" executed="True" result="Success" success="True" time="0.1257" asserts="0" description="invoking with different IPv4 Address">
                <results>
                  <test-case description="should be $false" name="MSFT_xIPAddress\Test-TargetResource.invoking with different IPv4 Address.should be $false" time="0.0986" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call appropriate mocks" name="MSFT_xIPAddress\Test-TargetResource.invoking with different IPv4 Address.should call appropriate mocks" time="0.0271" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with the same IPv4 Address" executed="True" result="Success" success="True" time="0.1357" asserts="0" description="invoking with the same IPv4 Address">
                <results>
                  <test-case description="should be $true" name="MSFT_xIPAddress\Test-TargetResource.invoking with the same IPv4 Address.should be $true" time="0.112" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call appropriate mocks" name="MSFT_xIPAddress\Test-TargetResource.invoking with the same IPv4 Address.should call appropriate mocks" time="0.0237" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with invalid IPv6 Address" executed="True" result="Success" success="True" time="0.0904" asserts="0" description="invoking with invalid IPv6 Address">
                <results>
                  <test-case description="should throw an AddressFormatError error" name="MSFT_xIPAddress\Test-TargetResource.invoking with invalid IPv6 Address.should throw an AddressFormatError error" time="0.0904" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with different IPv6 Address" executed="True" result="Success" success="True" time="0.1111" asserts="0" description="invoking with different IPv6 Address">
                <results>
                  <test-case description="should be $false" name="MSFT_xIPAddress\Test-TargetResource.invoking with different IPv6 Address.should be $false" time="0.0841" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call appropriate mocks" name="MSFT_xIPAddress\Test-TargetResource.invoking with different IPv6 Address.should call appropriate mocks" time="0.027" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with the same IPv6 Address" executed="True" result="Success" success="True" time="0.1092" asserts="0" description="invoking with the same IPv6 Address">
                <results>
                  <test-case description="should be $true" name="MSFT_xIPAddress\Test-TargetResource.invoking with the same IPv6 Address.should be $true" time="0.0836" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call appropriate mocks" name="MSFT_xIPAddress\Test-TargetResource.invoking with the same IPv6 Address.should call appropriate mocks" time="0.0256" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xIPAddress\Assert-ResourceProperty" executed="True" result="Success" success="True" time="0.7156" asserts="0" description="MSFT_xIPAddress\Assert-ResourceProperty">
            <results>
              <test-suite type="TestFixture" name="invoking with bad interface alias" executed="True" result="Success" success="True" time="0.1217" asserts="0" description="invoking with bad interface alias">
                <results>
                  <test-case description="should throw an InterfaceNotAvailable error" name="MSFT_xIPAddress\Assert-ResourceProperty.invoking with bad interface alias.should throw an InterfaceNotAvailable error" time="0.1217" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with invalid IP Address" executed="True" result="Success" success="True" time="0.0691" asserts="0" description="invoking with invalid IP Address">
                <results>
                  <test-case description="should throw an AddressFormatError error" name="MSFT_xIPAddress\Assert-ResourceProperty.invoking with invalid IP Address.should throw an AddressFormatError error" time="0.0691" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with IP Address and family mismatch" executed="True" result="Success" success="True" time="0.0867" asserts="0" description="invoking with IP Address and family mismatch">
                <results>
                  <test-case description="should throw an AddressMismatchError error" name="MSFT_xIPAddress\Assert-ResourceProperty.invoking with IP Address and family mismatch.should throw an AddressMismatchError error" time="0.0867" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with valid IPv4 Address" executed="True" result="Success" success="True" time="0.0804" asserts="0" description="invoking with valid IPv4 Address">
                <results>
                  <test-case description="should not throw an error" name="MSFT_xIPAddress\Assert-ResourceProperty.invoking with valid IPv4 Address.should not throw an error" time="0.0804" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with valid IPv6 Address" executed="True" result="Success" success="True" time="0.0729" asserts="0" description="invoking with valid IPv6 Address">
                <results>
                  <test-case description="should not throw an error" name="MSFT_xIPAddress\Assert-ResourceProperty.invoking with valid IPv6 Address.should not throw an error" time="0.0729" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with invalid IPv4 prefix length" executed="True" result="Success" success="True" time="0.1144" asserts="0" description="invoking with invalid IPv4 prefix length">
                <results>
                  <test-case description="should throw a PrefixLengthError when greater than 32" name="MSFT_xIPAddress\Assert-ResourceProperty.invoking with invalid IPv4 prefix length.should throw a PrefixLengthError when greater than 32" time="0.0869" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should throw an Argument error when less than 0" name="MSFT_xIPAddress\Assert-ResourceProperty.invoking with invalid IPv4 prefix length.should throw an Argument error when less than 0" time="0.0275" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with invalid IPv6 prefix length" executed="True" result="Success" success="True" time="0.1052" asserts="0" description="invoking with invalid IPv6 prefix length">
                <results>
                  <test-case description="should throw a PrefixLengthError error when greater than 128" name="MSFT_xIPAddress\Assert-ResourceProperty.invoking with invalid IPv6 prefix length.should throw a PrefixLengthError error when greater than 128" time="0.0781" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should throw an Argument error when less than 0" name="MSFT_xIPAddress\Assert-ResourceProperty.invoking with invalid IPv6 prefix length.should throw an Argument error when less than 0" time="0.0271" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with valid string IPv6 prefix length" executed="True" result="Success" success="True" time="0.0651" asserts="0" description="invoking with valid string IPv6 prefix length">
                <results>
                  <test-case description="should not throw an error" name="MSFT_xIPAddress\Assert-ResourceProperty.invoking with valid string IPv6 prefix length.should not throw an error" time="0.0651" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xNetAdapterBinding.Tests.ps1" executed="True" result="Success" success="True" time="1.8465" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xNetAdapterBinding.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MSFT_xNetAdapterBinding\Get-TargetResource" executed="True" result="Success" success="True" time="0.4845" asserts="0" description="MSFT_xNetAdapterBinding\Get-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Adapter exists and binding Enabled" executed="True" result="Success" success="True" time="0.2347" asserts="0" description="Adapter exists and binding Enabled">
                <results>
                  <test-case description="should return existing binding" name="MSFT_xNetAdapterBinding\Get-TargetResource.Adapter exists and binding Enabled.should return existing binding" time="0.2115" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call all the mocks" name="MSFT_xNetAdapterBinding\Get-TargetResource.Adapter exists and binding Enabled.Should call all the mocks" time="0.0233" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Adapter exists and binding Disabled" executed="True" result="Success" success="True" time="0.1197" asserts="0" description="Adapter exists and binding Disabled">
                <results>
                  <test-case description="should return existing binding" name="MSFT_xNetAdapterBinding\Get-TargetResource.Adapter exists and binding Disabled.should return existing binding" time="0.0924" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call all the mocks" name="MSFT_xNetAdapterBinding\Get-TargetResource.Adapter exists and binding Disabled.Should call all the mocks" time="0.0274" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="More than one Adapter exists and binding is Disabled on one and Enabled on another" executed="True" result="Success" success="True" time="0.1301" asserts="0" description="More than one Adapter exists and binding is Disabled on one and Enabled on another">
                <results>
                  <test-case description="should return existing binding" name="MSFT_xNetAdapterBinding\Get-TargetResource.More than one Adapter exists and binding is Disabled on one and Enabled on another.should return existing binding" time="0.1029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call all the mocks" name="MSFT_xNetAdapterBinding\Get-TargetResource.More than one Adapter exists and binding is Disabled on one and Enabled on another.Should call all the mocks" time="0.0271" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xNetAdapterBinding\Set-TargetResource" executed="True" result="Success" success="True" time="0.409" asserts="0" description="MSFT_xNetAdapterBinding\Set-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Adapter exists and set binding to Enabled" executed="True" result="Success" success="True" time="0.2409" asserts="0" description="Adapter exists and set binding to Enabled">
                <results>
                  <test-case description="Should not throw an exception" name="MSFT_xNetAdapterBinding\Set-TargetResource.Adapter exists and set binding to Enabled.Should not throw an exception" time="0.2072" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call all the mocks" name="MSFT_xNetAdapterBinding\Set-TargetResource.Adapter exists and set binding to Enabled.Should call all the mocks" time="0.0336" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Adapter exists and set binding to Disabled" executed="True" result="Success" success="True" time="0.1681" asserts="0" description="Adapter exists and set binding to Disabled">
                <results>
                  <test-case description="Should not throw an exception" name="MSFT_xNetAdapterBinding\Set-TargetResource.Adapter exists and set binding to Disabled.Should not throw an exception" time="0.1345" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call all the mocks" name="MSFT_xNetAdapterBinding\Set-TargetResource.Adapter exists and set binding to Disabled.Should call all the mocks" time="0.0337" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xNetAdapterBinding\Test-TargetResource" executed="True" result="Success" success="True" time="0.4529" asserts="0" description="MSFT_xNetAdapterBinding\Test-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Adapter exists, current binding set to Enabled but want it Disabled" executed="True" result="Success" success="True" time="0.1457" asserts="0" description="Adapter exists, current binding set to Enabled but want it Disabled">
                <results>
                  <test-case description="Should return false" name="MSFT_xNetAdapterBinding\Test-TargetResource.Adapter exists, current binding set to Enabled but want it Disabled.Should return false" time="0.1212" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call all the mocks" name="MSFT_xNetAdapterBinding\Test-TargetResource.Adapter exists, current binding set to Enabled but want it Disabled.Should call all the mocks" time="0.0245" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Adapter exists, current binding set to Disabled but want it Enabled" executed="True" result="Success" success="True" time="0.0994" asserts="0" description="Adapter exists, current binding set to Disabled but want it Enabled">
                <results>
                  <test-case description="Should return false" name="MSFT_xNetAdapterBinding\Test-TargetResource.Adapter exists, current binding set to Disabled but want it Enabled.Should return false" time="0.077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call all the mocks" name="MSFT_xNetAdapterBinding\Test-TargetResource.Adapter exists, current binding set to Disabled but want it Enabled.Should call all the mocks" time="0.0224" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Adapter exists, current binding set to Enabled and want it Enabled" executed="True" result="Success" success="True" time="0.1054" asserts="0" description="Adapter exists, current binding set to Enabled and want it Enabled">
                <results>
                  <test-case description="Should return true" name="MSFT_xNetAdapterBinding\Test-TargetResource.Adapter exists, current binding set to Enabled and want it Enabled.Should return true" time="0.0777" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call all the mocks" name="MSFT_xNetAdapterBinding\Test-TargetResource.Adapter exists, current binding set to Enabled and want it Enabled.Should call all the mocks" time="0.0277" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Adapter exists, current binding set to Disabled and want it Disabled" executed="True" result="Success" success="True" time="0.1025" asserts="0" description="Adapter exists, current binding set to Disabled and want it Disabled">
                <results>
                  <test-case description="Should return true" name="MSFT_xNetAdapterBinding\Test-TargetResource.Adapter exists, current binding set to Disabled and want it Disabled.Should return true" time="0.0804" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call all the mocks" name="MSFT_xNetAdapterBinding\Test-TargetResource.Adapter exists, current binding set to Disabled and want it Disabled.Should call all the mocks" time="0.022" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xNetAdapterBinding\Get-Binding" executed="True" result="Success" success="True" time="0.5" asserts="0" description="MSFT_xNetAdapterBinding\Get-Binding">
            <results>
              <test-suite type="TestFixture" name="Adapter does not exist" executed="True" result="Success" success="True" time="0.185" asserts="0" description="Adapter does not exist">
                <results>
                  <test-case description="Should throw an InterfaceNotAvailable error" name="MSFT_xNetAdapterBinding\Get-Binding.Adapter does not exist.Should throw an InterfaceNotAvailable error" time="0.1607" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call all the mocks" name="MSFT_xNetAdapterBinding\Get-Binding.Adapter does not exist.Should call all the mocks" time="0.0243" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Adapter exists and binding enabled" executed="True" result="Success" success="True" time="0.1779" asserts="0" description="Adapter exists and binding enabled">
                <results>
                  <test-case description="Should return the adapter binding" name="MSFT_xNetAdapterBinding\Get-Binding.Adapter exists and binding enabled.Should return the adapter binding" time="0.1482" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call all the mocks" name="MSFT_xNetAdapterBinding\Get-Binding.Adapter exists and binding enabled.Should call all the mocks" time="0.0296" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Adapter exists and binding disabled" executed="True" result="Success" success="True" time="0.1371" asserts="0" description="Adapter exists and binding disabled">
                <results>
                  <test-case description="Should return the adapter binding" name="MSFT_xNetAdapterBinding\Get-Binding.Adapter exists and binding disabled.Should return the adapter binding" time="0.1094" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should call all the mocks" name="MSFT_xNetAdapterBinding\Get-Binding.Adapter exists and binding disabled.Should call all the mocks" time="0.0277" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xNetAdapterRDMA.Tests.ps1" executed="True" result="Success" success="True" time="1.6277" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xNetAdapterRDMA.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="\Get-TargetResource" executed="True" result="Success" success="True" time="0.3729" asserts="0" description="\Get-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Network adapter does not exist" executed="True" result="Success" success="True" time="0.2286" asserts="0" description="Network adapter does not exist">
                <results>
                  <test-case description="should throw error" name="\Get-TargetResource.Network adapter does not exist.should throw error" time="0.199" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call the expected mocks" name="\Get-TargetResource.Network adapter does not exist.should call the expected mocks" time="0.0297" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Network Team exists" executed="True" result="Success" success="True" time="0.1442" asserts="0" description="Network Team exists">
                <results>
                  <test-case description="should return network adapter RDMA properties" name="\Get-TargetResource.Network Team exists.should return network adapter RDMA properties" time="0.1192" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call the expected mocks" name="\Get-TargetResource.Network Team exists.should call the expected mocks" time="0.025" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="\Set-TargetResource" executed="True" result="Success" success="True" time="0.6849" asserts="0" description="\Set-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Net Adapter does not exist" executed="True" result="Success" success="True" time="0.1488" asserts="0" description="Net Adapter does not exist">
                <results>
                  <test-case description="should throw error" name="\Set-TargetResource.Net Adapter does not exist.should throw error" time="0.1212" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="\Set-TargetResource.Net Adapter does not exist.should call expected Mocks" time="0.0276" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Net Adapter RDMA is already enabled and no action needed" executed="True" result="Success" success="True" time="0.131" asserts="0" description="Net Adapter RDMA is already enabled and no action needed">
                <results>
                  <test-case description="should not throw error" name="\Set-TargetResource.Net Adapter RDMA is already enabled and no action needed.should not throw error" time="0.1022" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="\Set-TargetResource.Net Adapter RDMA is already enabled and no action needed.should call expected Mocks" time="0.0288" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Net Adapter RDMA is disabled and should be enabled" executed="True" result="Success" success="True" time="0.1739" asserts="0" description="Net Adapter RDMA is disabled and should be enabled">
                <results>
                  <test-case description="should not throw error" name="\Set-TargetResource.Net Adapter RDMA is disabled and should be enabled.should not throw error" time="0.1358" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="\Set-TargetResource.Net Adapter RDMA is disabled and should be enabled.should call expected Mocks" time="0.0381" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Net Adapter RDMA is enabled and should be disabled" executed="True" result="Success" success="True" time="0.1251" asserts="0" description="Net Adapter RDMA is enabled and should be disabled">
                <results>
                  <test-case description="should not throw error" name="\Set-TargetResource.Net Adapter RDMA is enabled and should be disabled.should not throw error" time="0.0947" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="\Set-TargetResource.Net Adapter RDMA is enabled and should be disabled.should call expected Mocks" time="0.0304" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Net Adapter RDMA is already disabled and no action needed" executed="True" result="Success" success="True" time="0.1061" asserts="0" description="Net Adapter RDMA is already disabled and no action needed">
                <results>
                  <test-case description="should not throw error" name="\Set-TargetResource.Net Adapter RDMA is already disabled and no action needed.should not throw error" time="0.0868" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="\Set-TargetResource.Net Adapter RDMA is already disabled and no action needed.should call expected Mocks" time="0.0193" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="\Test-TargetResource" executed="True" result="Success" success="True" time="0.57" asserts="0" description="\Test-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Net Adapter does not exist" executed="True" result="Success" success="True" time="0.1344" asserts="0" description="Net Adapter does not exist">
                <results>
                  <test-case description="should throw error" name="\Test-TargetResource.Net Adapter does not exist.should throw error" time="0.1138" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="\Test-TargetResource.Net Adapter does not exist.should call expected Mocks" time="0.0206" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Net Adapter RDMA is already enabled and no action needed" executed="True" result="Success" success="True" time="0.0947" asserts="0" description="Net Adapter RDMA is already enabled and no action needed">
                <results>
                  <test-case description="should return true" name="\Test-TargetResource.Net Adapter RDMA is already enabled and no action needed.should return true" time="0.0747" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="\Test-TargetResource.Net Adapter RDMA is already enabled and no action needed.should call expected Mocks" time="0.02" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Net Adapter RDMA is disabled and should be enabled" executed="True" result="Success" success="True" time="0.1024" asserts="0" description="Net Adapter RDMA is disabled and should be enabled">
                <results>
                  <test-case description="should return false" name="\Test-TargetResource.Net Adapter RDMA is disabled and should be enabled.should return false" time="0.0821" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="\Test-TargetResource.Net Adapter RDMA is disabled and should be enabled.should call expected Mocks" time="0.0203" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Net Adapter RDMA is enabled and should be disabled" executed="True" result="Success" success="True" time="0.0992" asserts="0" description="Net Adapter RDMA is enabled and should be disabled">
                <results>
                  <test-case description="should return false" name="\Test-TargetResource.Net Adapter RDMA is enabled and should be disabled.should return false" time="0.0799" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="\Test-TargetResource.Net Adapter RDMA is enabled and should be disabled.should call expected Mocks" time="0.0193" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Net Adapter RDMA is already disabled and no action needed" executed="True" result="Success" success="True" time="0.1393" asserts="0" description="Net Adapter RDMA is already disabled and no action needed">
                <results>
                  <test-case description="should return true" name="\Test-TargetResource.Net Adapter RDMA is already disabled and no action needed.should return true" time="0.0907" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="\Test-TargetResource.Net Adapter RDMA is already disabled and no action needed.should call expected Mocks" time="0.0485" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xNetBIOS.Tests.ps1" executed="True" result="Success" success="True" time="1.5926" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xNetBIOS.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MSFT_xNetBIOS\Get-TargetResource" executed="True" result="Success" success="True" time="0.5927" asserts="0" description="MSFT_xNetBIOS\Get-TargetResource">
            <results>
              <test-case description="Returns a hashtable" name="MSFT_xNetBIOS\Get-TargetResource.Returns a hashtable" time="0.4582" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="NetBIOS over TCP/IP numerical setting &quot;0&quot; should translate to &quot;Default&quot;" name="MSFT_xNetBIOS\Get-TargetResource.NetBIOS over TCP/IP numerical setting &quot;0&quot; should translate to &quot;Default&quot;" time="0.0764" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="NetBIOS over TCP/IP setting should return real value &quot;Default&quot;, not parameter value &quot;Enable&quot;" name="MSFT_xNetBIOS\Get-TargetResource.NetBIOS over TCP/IP setting should return real value &quot;Default&quot;, not parameter value &quot;Enable&quot;" time="0.0581" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xNetBIOS\Test-TargetResource" executed="True" result="Success" success="True" time="0.6422" asserts="0" description="MSFT_xNetBIOS\Test-TargetResource">
            <results>
              <test-suite type="TestFixture" name="invoking with NetBIOS over TCP/IP set to default" executed="True" result="Success" success="True" time="0.1929" asserts="0" description="invoking with NetBIOS over TCP/IP set to default">
                <results>
                  <test-case description="should return true when value &quot;Default&quot; is set" name="MSFT_xNetBIOS\Test-TargetResource.invoking with NetBIOS over TCP/IP set to default.should return true when value &quot;Default&quot; is set" time="0.1301" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should return false when value &quot;Disable&quot; is set" name="MSFT_xNetBIOS\Test-TargetResource.invoking with NetBIOS over TCP/IP set to default.should return false when value &quot;Disable&quot; is set" time="0.0628" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with NetBIOS over TCP/IP set to Disable" executed="True" result="Success" success="True" time="0.168" asserts="0" description="invoking with NetBIOS over TCP/IP set to Disable">
                <results>
                  <test-case description="should return true when value &quot;Disable&quot; is set" name="MSFT_xNetBIOS\Test-TargetResource.invoking with NetBIOS over TCP/IP set to Disable.should return true when value &quot;Disable&quot; is set" time="0.1123" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should return false when value &quot;Enable&quot; is set" name="MSFT_xNetBIOS\Test-TargetResource.invoking with NetBIOS over TCP/IP set to Disable.should return false when value &quot;Enable&quot; is set" time="0.0558" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with NetBIOS over TCP/IP set to Enable" executed="True" result="Success" success="True" time="0.1671" asserts="0" description="invoking with NetBIOS over TCP/IP set to Enable">
                <results>
                  <test-case description="should return true when value &quot;Enable&quot; is set" name="MSFT_xNetBIOS\Test-TargetResource.invoking with NetBIOS over TCP/IP set to Enable.should return true when value &quot;Enable&quot; is set" time="0.1112" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should return false when value &quot;Disable&quot; is set" name="MSFT_xNetBIOS\Test-TargetResource.invoking with NetBIOS over TCP/IP set to Enable.should return false when value &quot;Disable&quot; is set" time="0.056" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Invoking with NonExisting Network Adapter" executed="True" result="Success" success="True" time="0.1141" asserts="0" description="Invoking with NonExisting Network Adapter">
                <results>
                  <test-case description="should throw ObjectNotFound exception" name="MSFT_xNetBIOS\Test-TargetResource.Invoking with NonExisting Network Adapter.should throw ObjectNotFound exception" time="0.1141" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xNetBIOS\Set-TargetResource" executed="True" result="Success" success="True" time="0.3577" asserts="0" description="MSFT_xNetBIOS\Set-TargetResource">
            <results>
              <test-suite type="TestFixture" name="&quot;Setting&quot; is &quot;Default&quot;" executed="True" result="Success" success="True" time="0.2185" asserts="0" description="&quot;Setting&quot; is &quot;Default&quot;">
                <results>
                  <test-case description="Should call &quot;Set-ItemProperty&quot; instead of &quot;Invoke-CimMethod&quot;" name="MSFT_xNetBIOS\Set-TargetResource.&quot;Setting&quot; is &quot;Default&quot;.Should call &quot;Set-ItemProperty&quot; instead of &quot;Invoke-CimMethod&quot;" time="0.2185" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="&quot;Setting&quot; is &quot;Disable&quot;" executed="True" result="Success" success="True" time="0.1392" asserts="0" description="&quot;Setting&quot; is &quot;Disable&quot;">
                <results>
                  <test-case description="Should call &quot;Invoke-CimMethod&quot; instead of &quot;Set-ItemProperty&quot;" name="MSFT_xNetBIOS\Set-TargetResource.&quot;Setting&quot; is &quot;Disable&quot;.Should call &quot;Invoke-CimMethod&quot; instead of &quot;Set-ItemProperty&quot;" time="0.1392" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xNetconnectionProfile.tests.ps1" executed="True" result="Success" success="True" time="1.2399" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xNetconnectionProfile.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MSFT_xNetConnectionProfile\Get-TargetResource" executed="True" result="Success" success="True" time="0.8948" asserts="0" description="MSFT_xNetConnectionProfile\Get-TargetResource">
            <results>
              <test-case description="Should return the correct values" name="MSFT_xNetConnectionProfile\Get-TargetResource.Should return the correct values" time="0.8948" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xNetConnectionProfile\Test-TargetResource" executed="True" result="Success" success="True" time="0.2408" asserts="0" description="MSFT_xNetConnectionProfile\Test-TargetResource">
            <results>
              <test-suite type="TestFixture" name="IPv4Connectivity is incorrect" executed="True" result="Success" success="True" time="0.1034" asserts="0" description="IPv4Connectivity is incorrect">
                <results>
                  <test-case description="should return false" name="MSFT_xNetConnectionProfile\Test-TargetResource.IPv4Connectivity is incorrect.should return false" time="0.1034" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="IPv6Connectivity is incorrect" executed="True" result="Success" success="True" time="0.0597" asserts="0" description="IPv6Connectivity is incorrect">
                <results>
                  <test-case description="should return false" name="MSFT_xNetConnectionProfile\Test-TargetResource.IPv6Connectivity is incorrect.should return false" time="0.0597" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NetworkCategory is incorrect" executed="True" result="Success" success="True" time="0.0777" asserts="0" description="NetworkCategory is incorrect">
                <results>
                  <test-case description="should return false" name="MSFT_xNetConnectionProfile\Test-TargetResource.NetworkCategory is incorrect.should return false" time="0.0777" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xNetConnectionProfile\Set-TargetResource" executed="True" result="Success" success="True" time="0.1043" asserts="0" description="MSFT_xNetConnectionProfile\Set-TargetResource">
            <results>
              <test-case description="Should do call all the mocks" name="MSFT_xNetConnectionProfile\Set-TargetResource.Should do call all the mocks" time="0.1043" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xNetworkTeam.Tests.ps1" executed="True" result="Success" success="True" time="3.028" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xNetworkTeam.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MSFT_xNetworkTeam\Get-TargetResource" executed="True" result="Success" success="True" time="1.0753" asserts="0" description="MSFT_xNetworkTeam\Get-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Team does not exist" executed="True" result="Success" success="True" time="0.9523" asserts="0" description="Team does not exist">
                <results>
                  <test-case description="should return ensure as absent" name="MSFT_xNetworkTeam\Get-TargetResource.Team does not exist.should return ensure as absent" time="0.9287" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call the expected mocks" name="MSFT_xNetworkTeam\Get-TargetResource.Team does not exist.should call the expected mocks" time="0.0236" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Network Team exists" executed="True" result="Success" success="True" time="0.123" asserts="0" description="Network Team exists">
                <results>
                  <test-case description="should return team properties" name="MSFT_xNetworkTeam\Get-TargetResource.Network Team exists.should return team properties" time="0.1053" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call the expected mocks" name="MSFT_xNetworkTeam\Get-TargetResource.Network Team exists.should call the expected mocks" time="0.0177" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xNetworkTeam\Set-TargetResource" executed="True" result="Success" success="True" time="1.1262" asserts="0" description="MSFT_xNetworkTeam\Set-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Team does not exist but should" executed="True" result="Success" success="True" time="0.2159" asserts="0" description="Team does not exist but should">
                <results>
                  <test-case description="should not throw error" name="MSFT_xNetworkTeam\Set-TargetResource.Team does not exist but should.should not throw error" time="0.1818" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeam\Set-TargetResource.Team does not exist but should.should call expected Mocks" time="0.0341" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="team exists but needs a different teaming mode" executed="True" result="Success" success="True" time="0.195" asserts="0" description="team exists but needs a different teaming mode">
                <results>
                  <test-case description="should not throw error" name="MSFT_xNetworkTeam\Set-TargetResource.team exists but needs a different teaming mode.should not throw error" time="0.1318" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeam\Set-TargetResource.team exists but needs a different teaming mode.should call expected Mocks" time="0.0632" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="team exists but needs a different load balacing algorithm" executed="True" result="Success" success="True" time="0.1532" asserts="0" description="team exists but needs a different load balacing algorithm">
                <results>
                  <test-case description="should not throw error" name="MSFT_xNetworkTeam\Set-TargetResource.team exists but needs a different load balacing algorithm.should not throw error" time="0.1215" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeam\Set-TargetResource.team exists but needs a different load balacing algorithm.should call expected Mocks" time="0.0317" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="team exists but has to remove a member adapter" executed="True" result="Success" success="True" time="0.1921" asserts="0" description="team exists but has to remove a member adapter">
                <results>
                  <test-case description="should not throw error" name="MSFT_xNetworkTeam\Set-TargetResource.team exists but has to remove a member adapter.should not throw error" time="0.1515" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeam\Set-TargetResource.team exists but has to remove a member adapter.should call expected Mocks" time="0.0406" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="team exists but has to add a member adapter" executed="True" result="Success" success="True" time="0.1868" asserts="0" description="team exists but has to add a member adapter">
                <results>
                  <test-case description="should not throw error" name="MSFT_xNetworkTeam\Set-TargetResource.team exists but has to add a member adapter.should not throw error" time="0.1444" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeam\Set-TargetResource.team exists but has to add a member adapter.should call expected Mocks" time="0.0424" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="team exists but should not exist" executed="True" result="Success" success="True" time="0.1832" asserts="0" description="team exists but should not exist">
                <results>
                  <test-case description="should not throw error" name="MSFT_xNetworkTeam\Set-TargetResource.team exists but should not exist.should not throw error" time="0.1427" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeam\Set-TargetResource.team exists but should not exist.should call expected Mocks" time="0.0405" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xNetworkTeam\Test-TargetResource" executed="True" result="Success" success="True" time="0.8264" asserts="0" description="MSFT_xNetworkTeam\Test-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Team does not exist but should" executed="True" result="Success" success="True" time="0.1323" asserts="0" description="Team does not exist but should">
                <results>
                  <test-case description="should return false" name="MSFT_xNetworkTeam\Test-TargetResource.Team does not exist but should.should return false" time="0.1115" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeam\Test-TargetResource.Team does not exist but should.should call expected Mocks" time="0.0208" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="team exists but needs a different teaming mode" executed="True" result="Success" success="True" time="0.1052" asserts="0" description="team exists but needs a different teaming mode">
                <results>
                  <test-case description="should return false" name="MSFT_xNetworkTeam\Test-TargetResource.team exists but needs a different teaming mode.should return false" time="0.0865" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeam\Test-TargetResource.team exists but needs a different teaming mode.should call expected Mocks" time="0.0187" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="team exists but needs a different load balacing algorithm" executed="True" result="Success" success="True" time="0.1124" asserts="0" description="team exists but needs a different load balacing algorithm">
                <results>
                  <test-case description="should return false" name="MSFT_xNetworkTeam\Test-TargetResource.team exists but needs a different load balacing algorithm.should return false" time="0.0908" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeam\Test-TargetResource.team exists but needs a different load balacing algorithm.should call expected Mocks" time="0.0217" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="team exists but has to remove a member adapter" executed="True" result="Success" success="True" time="0.0994" asserts="0" description="team exists but has to remove a member adapter">
                <results>
                  <test-case description="should return false" name="MSFT_xNetworkTeam\Test-TargetResource.team exists but has to remove a member adapter.should return false" time="0.0792" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeam\Test-TargetResource.team exists but has to remove a member adapter.should call expected Mocks" time="0.0202" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="team exists but has to add a member adapter" executed="True" result="Success" success="True" time="0.0955" asserts="0" description="team exists but has to add a member adapter">
                <results>
                  <test-case description="should return false" name="MSFT_xNetworkTeam\Test-TargetResource.team exists but has to add a member adapter.should return false" time="0.0722" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeam\Test-TargetResource.team exists but has to add a member adapter.should call expected Mocks" time="0.0233" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="team exists but should not exist" executed="True" result="Success" success="True" time="0.085" asserts="0" description="team exists but should not exist">
                <results>
                  <test-case description="should return $false" name="MSFT_xNetworkTeam\Test-TargetResource.team exists but should not exist.should return $false" time="0.0687" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeam\Test-TargetResource.team exists but should not exist.should call expected Mocks" time="0.0164" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="team exists and no action needed" executed="True" result="Success" success="True" time="0.0866" asserts="0" description="team exists and no action needed">
                <results>
                  <test-case description="should return true" name="MSFT_xNetworkTeam\Test-TargetResource.team exists and no action needed.should return true" time="0.0711" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeam\Test-TargetResource.team exists and no action needed.should call expected Mocks" time="0.0155" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="team does not and no action needed" executed="True" result="Success" success="True" time="0.1099" asserts="0" description="team does not and no action needed">
                <results>
                  <test-case description="should return true" name="MSFT_xNetworkTeam\Test-TargetResource.team does not and no action needed.should return true" time="0.0885" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeam\Test-TargetResource.team does not and no action needed.should call expected Mocks" time="0.0215" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xNetworkTeamInterface.Tests.ps1" executed="True" result="Success" success="True" time="1.4793" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xNetworkTeamInterface.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MSFT_xNetworkTeamInterface\Get-TargetResource" executed="True" result="Success" success="True" time="0.3546" asserts="0" description="MSFT_xNetworkTeamInterface\Get-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Team Interface does not exist" executed="True" result="Success" success="True" time="0.2312" asserts="0" description="Team Interface does not exist">
                <results>
                  <test-case description="should return ensure as absent" name="MSFT_xNetworkTeamInterface\Get-TargetResource.Team Interface does not exist.should return ensure as absent" time="0.2029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call the expected mocks" name="MSFT_xNetworkTeamInterface\Get-TargetResource.Team Interface does not exist.should call the expected mocks" time="0.0283" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Network Team Interface exists" executed="True" result="Success" success="True" time="0.1234" asserts="0" description="Network Team Interface exists">
                <results>
                  <test-case description="should return team properties" name="MSFT_xNetworkTeamInterface\Get-TargetResource.Network Team Interface exists.should return team properties" time="0.088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call the expected mocks" name="MSFT_xNetworkTeamInterface\Get-TargetResource.Network Team Interface exists.should call the expected mocks" time="0.0354" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xNetworkTeamInterface\Set-TargetResource" executed="True" result="Success" success="True" time="0.5922" asserts="0" description="MSFT_xNetworkTeamInterface\Set-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Team Interface does not exist but should" executed="True" result="Success" success="True" time="0.2264" asserts="0" description="Team Interface does not exist but should">
                <results>
                  <test-case description="should not throw error" name="MSFT_xNetworkTeamInterface\Set-TargetResource.Team Interface does not exist but should.should not throw error" time="0.1883" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeamInterface\Set-TargetResource.Team Interface does not exist but should.should call expected Mocks" time="0.0381" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Team Interface exists but needs a different VlanID" executed="True" result="Success" success="True" time="0.1826" asserts="0" description="Team Interface exists but needs a different VlanID">
                <results>
                  <test-case description="should not throw error" name="MSFT_xNetworkTeamInterface\Set-TargetResource.Team Interface exists but needs a different VlanID.should not throw error" time="0.1454" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeamInterface\Set-TargetResource.Team Interface exists but needs a different VlanID.should call expected Mocks" time="0.0372" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Team Interface exists but should not exist" executed="True" result="Success" success="True" time="0.1832" asserts="0" description="Team Interface exists but should not exist">
                <results>
                  <test-case description="should not throw error" name="MSFT_xNetworkTeamInterface\Set-TargetResource.Team Interface exists but should not exist.should not throw error" time="0.1454" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeamInterface\Set-TargetResource.Team Interface exists but should not exist.should call expected Mocks" time="0.0378" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xNetworkTeamInterface\Test-TargetResource" executed="True" result="Success" success="True" time="0.5325" asserts="0" description="MSFT_xNetworkTeamInterface\Test-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Team Interface does not exist but should" executed="True" result="Success" success="True" time="0.1242" asserts="0" description="Team Interface does not exist but should">
                <results>
                  <test-case description="should return false" name="MSFT_xNetworkTeamInterface\Test-TargetResource.Team Interface does not exist but should.should return false" time="0.1053" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeamInterface\Test-TargetResource.Team Interface does not exist but should.should call expected Mocks" time="0.0189" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Team Interface exists but needs a different VlanID" executed="True" result="Success" success="True" time="0.1014" asserts="0" description="Team Interface exists but needs a different VlanID">
                <results>
                  <test-case description="should return false" name="MSFT_xNetworkTeamInterface\Test-TargetResource.Team Interface exists but needs a different VlanID.should return false" time="0.0763" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeamInterface\Test-TargetResource.Team Interface exists but needs a different VlanID.should call expected Mocks" time="0.025" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Team Interface exists but should not exist" executed="True" result="Success" success="True" time="0.1018" asserts="0" description="Team Interface exists but should not exist">
                <results>
                  <test-case description="should return $false" name="MSFT_xNetworkTeamInterface\Test-TargetResource.Team Interface exists but should not exist.should return $false" time="0.0771" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeamInterface\Test-TargetResource.Team Interface exists but should not exist.should call expected Mocks" time="0.0246" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Team Interface exists and no action needed" executed="True" result="Success" success="True" time="0.1064" asserts="0" description="Team Interface exists and no action needed">
                <results>
                  <test-case description="should return true" name="MSFT_xNetworkTeamInterface\Test-TargetResource.Team Interface exists and no action needed.should return true" time="0.0848" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeamInterface\Test-TargetResource.Team Interface exists and no action needed.should call expected Mocks" time="0.0216" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Team Interface does not exist and no action needed" executed="True" result="Success" success="True" time="0.0988" asserts="0" description="Team Interface does not exist and no action needed">
                <results>
                  <test-case description="should return true" name="MSFT_xNetworkTeamInterface\Test-TargetResource.Team Interface does not exist and no action needed.should return true" time="0.0759" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xNetworkTeamInterface\Test-TargetResource.Team Interface does not exist and no action needed.should call expected Mocks" time="0.023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xRoute.Tests.ps1" executed="True" result="Success" success="True" time="2.9706" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\MSFT_xRoute.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MSFT_xRoute\Get-TargetResource" executed="True" result="Success" success="True" time="0.4646" asserts="0" description="MSFT_xRoute\Get-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Route does not exist" executed="True" result="Success" success="True" time="0.3112" asserts="0" description="Route does not exist">
                <results>
                  <test-case description="should return absent Route" name="MSFT_xRoute\Get-TargetResource.Route does not exist.should return absent Route" time="0.2865" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call the expected mocks" name="MSFT_xRoute\Get-TargetResource.Route does not exist.should call the expected mocks" time="0.0247" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Route does exist" executed="True" result="Success" success="True" time="0.1534" asserts="0" description="Route does exist">
                <results>
                  <test-case description="should return correct Route" name="MSFT_xRoute\Get-TargetResource.Route does exist.should return correct Route" time="0.1365" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call the expected mocks" name="MSFT_xRoute\Get-TargetResource.Route does exist.should call the expected mocks" time="0.0169" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xRoute\Set-TargetResource" executed="True" result="Success" success="True" time="1.0346" asserts="0" description="MSFT_xRoute\Set-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Route does not exist but should" executed="True" result="Success" success="True" time="0.2281" asserts="0" description="Route does not exist but should">
                <results>
                  <test-case description="should not throw error" name="MSFT_xRoute\Set-TargetResource.Route does not exist but should.should not throw error" time="0.1959" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xRoute\Set-TargetResource.Route does not exist but should.should call expected Mocks" time="0.0322" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Route exists and should but has a different RouteMetric" executed="True" result="Success" success="True" time="0.1631" asserts="0" description="Route exists and should but has a different RouteMetric">
                <results>
                  <test-case description="should not throw error" name="MSFT_xRoute\Set-TargetResource.Route exists and should but has a different RouteMetric.should not throw error" time="0.1273" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xRoute\Set-TargetResource.Route exists and should but has a different RouteMetric.should call expected Mocks" time="0.0358" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Route exists and should but has a different Publish" executed="True" result="Success" success="True" time="0.1591" asserts="0" description="Route exists and should but has a different Publish">
                <results>
                  <test-case description="should not throw error" name="MSFT_xRoute\Set-TargetResource.Route exists and should but has a different Publish.should not throw error" time="0.1303" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xRoute\Set-TargetResource.Route exists and should but has a different Publish.should call expected Mocks" time="0.0288" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Route exists and should but has a different PreferredLifetime" executed="True" result="Success" success="True" time="0.1777" asserts="0" description="Route exists and should but has a different PreferredLifetime">
                <results>
                  <test-case description="should not throw error" name="MSFT_xRoute\Set-TargetResource.Route exists and should but has a different PreferredLifetime.should not throw error" time="0.144" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected mocks" name="MSFT_xRoute\Set-TargetResource.Route exists and should but has a different PreferredLifetime.should call expected mocks" time="0.0337" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Route exists and but should not" executed="True" result="Success" success="True" time="0.1768" asserts="0" description="Route exists and but should not">
                <results>
                  <test-case description="should not throw error" name="MSFT_xRoute\Set-TargetResource.Route exists and but should not.should not throw error" time="0.1367" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected mocks and parameters" name="MSFT_xRoute\Set-TargetResource.Route exists and but should not.should call expected mocks and parameters" time="0.0401" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Route does not exist and should not" executed="True" result="Success" success="True" time="0.1298" asserts="0" description="Route does not exist and should not">
                <results>
                  <test-case description="should not throw error" name="MSFT_xRoute\Set-TargetResource.Route does not exist and should not.should not throw error" time="0.0978" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xRoute\Set-TargetResource.Route does not exist and should not.should call expected Mocks" time="0.032" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xRoute\Test-TargetResource" executed="True" result="Success" success="True" time="0.815" asserts="0" description="MSFT_xRoute\Test-TargetResource">
            <results>
              <test-suite type="TestFixture" name="Route does not exist but should" executed="True" result="Success" success="True" time="0.1543" asserts="0" description="Route does not exist but should">
                <results>
                  <test-case description="should return false" name="MSFT_xRoute\Test-TargetResource.Route does not exist but should.should return false" time="0.1369" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xRoute\Test-TargetResource.Route does not exist but should.should call expected Mocks" time="0.0174" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Route exists and should but has a different RouteMetric" executed="True" result="Success" success="True" time="0.1132" asserts="0" description="Route exists and should but has a different RouteMetric">
                <results>
                  <test-case description="should return false" name="MSFT_xRoute\Test-TargetResource.Route exists and should but has a different RouteMetric.should return false" time="0.0883" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xRoute\Test-TargetResource.Route exists and should but has a different RouteMetric.should call expected Mocks" time="0.0249" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Route exists and should but has a different Publish" executed="True" result="Success" success="True" time="0.1023" asserts="0" description="Route exists and should but has a different Publish">
                <results>
                  <test-case description="should return false" name="MSFT_xRoute\Test-TargetResource.Route exists and should but has a different Publish.should return false" time="0.0847" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xRoute\Test-TargetResource.Route exists and should but has a different Publish.should call expected Mocks" time="0.0176" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Route exists and should but has a different PreferredLifetime" executed="True" result="Success" success="True" time="0.1072" asserts="0" description="Route exists and should but has a different PreferredLifetime">
                <results>
                  <test-case description="should return false" name="MSFT_xRoute\Test-TargetResource.Route exists and should but has a different PreferredLifetime.should return false" time="0.0932" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xRoute\Test-TargetResource.Route exists and should but has a different PreferredLifetime.should call expected Mocks" time="0.014" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Route exists and should and all parameters match" executed="True" result="Success" success="True" time="0.1047" asserts="0" description="Route exists and should and all parameters match">
                <results>
                  <test-case description="should return true" name="MSFT_xRoute\Test-TargetResource.Route exists and should and all parameters match.should return true" time="0.0875" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xRoute\Test-TargetResource.Route exists and should and all parameters match.should call expected Mocks" time="0.0172" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Route exists but should not" executed="True" result="Success" success="True" time="0.1225" asserts="0" description="Route exists but should not">
                <results>
                  <test-case description="should return false" name="MSFT_xRoute\Test-TargetResource.Route exists but should not.should return false" time="0.1071" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xRoute\Test-TargetResource.Route exists but should not.should call expected Mocks" time="0.0154" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Route does not exist and should not" executed="True" result="Success" success="True" time="0.1107" asserts="0" description="Route does not exist and should not">
                <results>
                  <test-case description="should return true" name="MSFT_xRoute\Test-TargetResource.Route does not exist and should not.should return true" time="0.0895" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="MSFT_xRoute\Test-TargetResource.Route does not exist and should not.should call expected Mocks" time="0.0212" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xRoute\Assert-ResourceProperty" executed="True" result="Success" success="True" time="0.6564" asserts="0" description="MSFT_xRoute\Assert-ResourceProperty">
            <results>
              <test-suite type="TestFixture" name="invoking with bad interface alias" executed="True" result="Success" success="True" time="0.1026" asserts="0" description="invoking with bad interface alias">
                <results>
                  <test-case description="should throw an InterfaceNotAvailable error" name="MSFT_xRoute\Assert-ResourceProperty.invoking with bad interface alias.should throw an InterfaceNotAvailable error" time="0.1026" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with bad IPv4 DestinationPrefix address" executed="True" result="Success" success="True" time="0.0784" asserts="0" description="invoking with bad IPv4 DestinationPrefix address">
                <results>
                  <test-case description="should throw an AddressFormatError error" name="MSFT_xRoute\Assert-ResourceProperty.invoking with bad IPv4 DestinationPrefix address.should throw an AddressFormatError error" time="0.0784" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with bad IPv6 DestinationPrefix address" executed="True" result="Success" success="True" time="0.0693" asserts="0" description="invoking with bad IPv6 DestinationPrefix address">
                <results>
                  <test-case description="should throw an AddressFormatError error" name="MSFT_xRoute\Assert-ResourceProperty.invoking with bad IPv6 DestinationPrefix address.should throw an AddressFormatError error" time="0.0693" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with IPv4 DestinationPrefix mismatch" executed="True" result="Success" success="True" time="0.0689" asserts="0" description="invoking with IPv4 DestinationPrefix mismatch">
                <results>
                  <test-case description="should throw an AddressIPv6MismatchError error" name="MSFT_xRoute\Assert-ResourceProperty.invoking with IPv4 DestinationPrefix mismatch.should throw an AddressIPv6MismatchError error" time="0.0689" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with IPv6 DestinationPrefix mismatch" executed="True" result="Success" success="True" time="0.0748" asserts="0" description="invoking with IPv6 DestinationPrefix mismatch">
                <results>
                  <test-case description="should throw an AddressIPv4MismatchError error" name="MSFT_xRoute\Assert-ResourceProperty.invoking with IPv6 DestinationPrefix mismatch.should throw an AddressIPv4MismatchError error" time="0.0748" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with bad IPv4 NextHop address" executed="True" result="Success" success="True" time="0.0675" asserts="0" description="invoking with bad IPv4 NextHop address">
                <results>
                  <test-case description="should throw an AddressFormatError error" name="MSFT_xRoute\Assert-ResourceProperty.invoking with bad IPv4 NextHop address.should throw an AddressFormatError error" time="0.0675" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with bad IPv6 NextHop address" executed="True" result="Success" success="True" time="0.0656" asserts="0" description="invoking with bad IPv6 NextHop address">
                <results>
                  <test-case description="should throw an AddressFormatError error" name="MSFT_xRoute\Assert-ResourceProperty.invoking with bad IPv6 NextHop address.should throw an AddressFormatError error" time="0.0656" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with IPv4 NextHop mismatch" executed="True" result="Success" success="True" time="0.063" asserts="0" description="invoking with IPv4 NextHop mismatch">
                <results>
                  <test-case description="should throw an AddressIPv6MismatchError error" name="MSFT_xRoute\Assert-ResourceProperty.invoking with IPv4 NextHop mismatch.should throw an AddressIPv6MismatchError error" time="0.063" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="invoking with IPv6 NextHop mismatch" executed="True" result="Success" success="True" time="0.0662" asserts="0" description="invoking with IPv6 NextHop mismatch">
                <results>
                  <test-case description="should throw an AddressIPv4MismatchError error" name="MSFT_xRoute\Assert-ResourceProperty.invoking with IPv6 NextHop mismatch.should throw an AddressIPv4MismatchError error" time="0.0662" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\NetworkingDsc.Common.tests.ps1" executed="True" result="Success" success="True" time="0.5433" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\NetworkingDsc.Common.tests.ps1">
        <results>
          <test-suite type="TestFixture" name="NetworkingDsc.Common\Convert-CIDRToSubhetMask" executed="True" result="Success" success="True" time="0.5433" asserts="0" description="NetworkingDsc.Common\Convert-CIDRToSubhetMask">
            <results>
              <test-suite type="TestFixture" name="Subnet Mask Notation Used &quot;192.168.0.0/255.255.0.0&quot;" executed="True" result="Success" success="True" time="0.1431" asserts="0" description="Subnet Mask Notation Used &quot;192.168.0.0/255.255.0.0&quot;">
                <results>
                  <test-case description="Should Return &quot;192.168.0.0/255.255.0.0&quot;" name="NetworkingDsc.Common\Convert-CIDRToSubhetMask.Subnet Mask Notation Used &quot;192.168.0.0/255.255.0.0&quot;.Should Return &quot;192.168.0.0/255.255.0.0&quot;" time="0.1431" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Subnet Mask Notation Used &quot;192.168.0.10/255.255.0.0&quot; resulting in source bits masked" executed="True" result="Success" success="True" time="0.0848" asserts="0" description="Subnet Mask Notation Used &quot;192.168.0.10/255.255.0.0&quot; resulting in source bits masked">
                <results>
                  <test-case description="Should Return &quot;192.168.0.0/255.255.0.0&quot; with source bits masked" name="NetworkingDsc.Common\Convert-CIDRToSubhetMask.Subnet Mask Notation Used &quot;192.168.0.10/255.255.0.0&quot; resulting in source bits masked.Should Return &quot;192.168.0.0/255.255.0.0&quot; with source bits masked" time="0.0848" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="CIDR Notation Used &quot;192.168.0.0/16&quot;" executed="True" result="Success" success="True" time="0.0834" asserts="0" description="CIDR Notation Used &quot;192.168.0.0/16&quot;">
                <results>
                  <test-case description="Should Return &quot;192.168.0.0/255.255.0.0&quot;" name="NetworkingDsc.Common\Convert-CIDRToSubhetMask.CIDR Notation Used &quot;192.168.0.0/16&quot;.Should Return &quot;192.168.0.0/255.255.0.0&quot;" time="0.0834" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="CIDR Notation Used &quot;192.168.0.10/16&quot; resulting in source bits masked" executed="True" result="Success" success="True" time="0.0523" asserts="0" description="CIDR Notation Used &quot;192.168.0.10/16&quot; resulting in source bits masked">
                <results>
                  <test-case description="Should Return &quot;192.168.0.0/255.255.0.0&quot; with source bits masked" name="NetworkingDsc.Common\Convert-CIDRToSubhetMask.CIDR Notation Used &quot;192.168.0.10/16&quot; resulting in source bits masked.Should Return &quot;192.168.0.0/255.255.0.0&quot; with source bits masked" time="0.0523" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Multiple Notations Used &quot;192.168.0.0/16,10.0.0.24/255.255.255.0&quot;" executed="True" result="Success" success="True" time="0.0599" asserts="0" description="Multiple Notations Used &quot;192.168.0.0/16,10.0.0.24/255.255.255.0&quot;">
                <results>
                  <test-case description="Should Return &quot;192.168.0.0/255.255.0.0,10.0.0.0/255.255.255.0&quot;" name="NetworkingDsc.Common\Convert-CIDRToSubhetMask.Multiple Notations Used &quot;192.168.0.0/16,10.0.0.24/255.255.255.0&quot;.Should Return &quot;192.168.0.0/255.255.0.0,10.0.0.0/255.255.255.0&quot;" time="0.0599" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Range Used &quot;192.168.1.0-192.168.1.128&quot;" executed="True" result="Success" success="True" time="0.0608" asserts="0" description="Range Used &quot;192.168.1.0-192.168.1.128&quot;">
                <results>
                  <test-case description="Should Return &quot;192.168.1.0-192.168.1.128&quot;" name="NetworkingDsc.Common\Convert-CIDRToSubhetMask.Range Used &quot;192.168.1.0-192.168.1.128&quot;.Should Return &quot;192.168.1.0-192.168.1.128&quot;" time="0.0608" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="IPv6 Used &quot;fe80::/112&quot;" executed="True" result="Success" success="True" time="0.0591" asserts="0" description="IPv6 Used &quot;fe80::/112&quot;">
                <results>
                  <test-case description="Should Return &quot;fe80::/112&quot;" name="NetworkingDsc.Common\Convert-CIDRToSubhetMask.IPv6 Used &quot;fe80::/112&quot;.Should Return &quot;fe80::/112&quot;" time="0.0591" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\xNetworkAdapter.Tests.ps1" executed="True" result="Success" success="True" time="1.7343" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Unit\xNetworkAdapter.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="xNetworkAdapter\Get-xNetworkAdapterName" executed="True" result="Success" success="True" time="0.5524" asserts="0" description="xNetworkAdapter\Get-xNetworkAdapterName">
            <results>
              <test-suite type="TestFixture" name="Adapter does not exist" executed="True" result="Success" success="True" time="0.1855" asserts="0" description="Adapter does not exist">
                <results>
                  <test-case description="should return absent Route" name="xNetworkAdapter\Get-xNetworkAdapterName.Adapter does not exist.should return absent Route" time="0.1592" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call the expected mocks" name="xNetworkAdapter\Get-xNetworkAdapterName.Adapter does not exist.should call the expected mocks" time="0.0263" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Adapter does exist" executed="True" result="Success" success="True" time="0.1245" asserts="0" description="Adapter does exist">
                <results>
                  <test-case description="should return correct Route" name="xNetworkAdapter\Get-xNetworkAdapterName.Adapter does exist.should return correct Route" time="0.1107" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call the expected mocks" name="xNetworkAdapter\Get-xNetworkAdapterName.Adapter does exist.should call the expected mocks" time="0.0137" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Hyperv VM Adapter does exist" executed="True" result="Success" success="True" time="0.1098" asserts="0" description="Hyperv VM Adapter does exist">
                <results>
                  <test-case description="should return correct Route" name="xNetworkAdapter\Get-xNetworkAdapterName.Hyperv VM Adapter does exist.should return correct Route" time="0.0852" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call the expected mocks" name="xNetworkAdapter\Get-xNetworkAdapterName.Hyperv VM Adapter does exist.should call the expected mocks" time="0.0246" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Multiple Adapters exist" executed="True" result="Success" success="True" time="0.1327" asserts="0" description="Multiple Adapters exist">
                <results>
                  <test-case description="should return correct Route" name="xNetworkAdapter\Get-xNetworkAdapterName.Multiple Adapters exist.should return correct Route" time="0.1105" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call the expected mocks" name="xNetworkAdapter\Get-xNetworkAdapterName.Multiple Adapters exist.should call the expected mocks" time="0.0222" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="xNetworkAdapter\Set-xNetworkAdapterName" executed="True" result="Success" success="True" time="0.9319" asserts="0" description="xNetworkAdapter\Set-xNetworkAdapterName">
            <results>
              <test-suite type="TestFixture" name="Adapter does not exist" executed="True" result="Success" success="True" time="0.2254" asserts="0" description="Adapter does not exist">
                <results>
                  <test-case description="should not throw error" name="xNetworkAdapter\Set-xNetworkAdapterName.Adapter does not exist.should not throw error" time="0.1996" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="xNetworkAdapter\Set-xNetworkAdapterName.Adapter does not exist.should call expected Mocks" time="0.0259" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Adapter exists and should be renamed" executed="True" result="Success" success="True" time="0.1632" asserts="0" description="Adapter exists and should be renamed">
                <results>
                  <test-case description="should not throw error" name="xNetworkAdapter\Set-xNetworkAdapterName.Adapter exists and should be renamed.should not throw error" time="0.1195" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="xNetworkAdapter\Set-xNetworkAdapterName.Adapter exists and should be renamed.should call expected Mocks" time="0.0436" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Hyperv VM Adapter exists and should be renamed" executed="True" result="Success" success="True" time="0.1613" asserts="0" description="Hyperv VM Adapter exists and should be renamed">
                <results>
                  <test-case description="should not throw error" name="xNetworkAdapter\Set-xNetworkAdapterName.Hyperv VM Adapter exists and should be renamed.should not throw error" time="0.1298" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="xNetworkAdapter\Set-xNetworkAdapterName.Hyperv VM Adapter exists and should be renamed.should call expected Mocks" time="0.0315" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Multiple matching adapter exists and IgnoreMultipleMatchingAdapters is true and name matches" executed="True" result="Success" success="True" time="0.1331" asserts="0" description="Multiple matching adapter exists and IgnoreMultipleMatchingAdapters is true and name matches">
                <results>
                  <test-case description="should not throw error" name="xNetworkAdapter\Set-xNetworkAdapterName.Multiple matching adapter exists and IgnoreMultipleMatchingAdapters is true and name matches.should not throw error" time="0.099" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="xNetworkAdapter\Set-xNetworkAdapterName.Multiple matching adapter exists and IgnoreMultipleMatchingAdapters is true and name matches.should call expected Mocks" time="0.0341" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Multiple matching adapter exists and IgnoreMultipleMatchingAdapters is true and name mismatches" executed="True" result="Success" success="True" time="0.1236" asserts="0" description="Multiple matching adapter exists and IgnoreMultipleMatchingAdapters is true and name mismatches">
                <results>
                  <test-case description="should not throw error" name="xNetworkAdapter\Set-xNetworkAdapterName.Multiple matching adapter exists and IgnoreMultipleMatchingAdapters is true and name mismatches.should not throw error" time="0.0996" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="xNetworkAdapter\Set-xNetworkAdapterName.Multiple matching adapter exists and IgnoreMultipleMatchingAdapters is true and name mismatches.should call expected Mocks" time="0.024" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Multiple matching adapter exists and IgnoreMultipleMatchingAdapters is false" executed="True" result="Success" success="True" time="0.1253" asserts="0" description="Multiple matching adapter exists and IgnoreMultipleMatchingAdapters is false">
                <results>
                  <test-case description="should not throw error" name="xNetworkAdapter\Set-xNetworkAdapterName.Multiple matching adapter exists and IgnoreMultipleMatchingAdapters is false.should not throw error" time="0.1029" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="xNetworkAdapter\Set-xNetworkAdapterName.Multiple matching adapter exists and IgnoreMultipleMatchingAdapters is false.should call expected Mocks" time="0.0224" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="xNetworkAdapter\Test-xNetworkAdapterName" executed="True" result="Success" success="True" time="0.2499" asserts="0" description="xNetworkAdapter\Test-xNetworkAdapterName">
            <results>
              <test-suite type="TestFixture" name="NetAdapter does not exist" executed="True" result="Success" success="True" time="0.1191" asserts="0" description="NetAdapter does not exist">
                <results>
                  <test-case description="should return false" name="xNetworkAdapter\Test-xNetworkAdapterName.NetAdapter does not exist.should return false" time="0.0944" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="xNetworkAdapter\Test-xNetworkAdapterName.NetAdapter does not exist.should call expected Mocks" time="0.0248" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NetAdapter exists and should but renamed" executed="True" result="Success" success="True" time="0.1308" asserts="0" description="NetAdapter exists and should but renamed">
                <results>
                  <test-case description="should return false" name="xNetworkAdapter\Test-xNetworkAdapterName.NetAdapter exists and should but renamed.should return false" time="0.1128" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="should call expected Mocks" name="xNetworkAdapter\Test-xNetworkAdapterName.NetAdapter exists and should but renamed.should call expected Mocks" time="0.018" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="xNetworkAdapter\Test-ResourceProperty" executed="True" result="Success" success="True" time="0" asserts="0" description="xNetworkAdapter\Test-ResourceProperty">
            <results>
              <test-suite type="TestFixture" name="TBD" executed="True" result="Success" success="True" time="0" asserts="0" description="TBD">
                <results />
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDefaultGatewayAddress.Integration.Tests.ps1" executed="True" result="Failure" success="False" time="14.2416" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDefaultGatewayAddress.Integration.Tests.ps1">
        <results>
          <test-case description="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDefaultGatewayAddress.Integration.Tests.ps1'" name="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDefaultGatewayAddress.Integration.Tests.ps1'" time="14.2416" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDefaultGatewayAddress.config.ps1:8 char:5
+     Import-DscResource -ModuleName xNetworking
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Multiple versions of the module 'xNetworking' were found. You can run 'Get-Module -ListAvailable -FullyQualifiedName xNetworking' to see available versions on the system, and then use the fully qualified name '@{ModuleName="xNetworking"; RequiredVersion="Version"}'.</message>
              <stack-trace>at &lt;ScriptBlock&gt;, C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDefaultGatewayAddress.Integration.Tests.ps1: line 31</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDhcpClient.Integration.Tests.ps1" executed="True" result="Failure" success="False" time="12.9612" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDhcpClient.Integration.Tests.ps1">
        <results>
          <test-case description="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDhcpClient.Integration.Tests.ps1'" name="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDhcpClient.Integration.Tests.ps1'" time="12.9612" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDhcpClient.config.ps1:8 char:5
+     Import-DscResource -ModuleName xNetworking
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Multiple versions of the module 'xNetworking' were found. You can run 'Get-Module -ListAvailable -FullyQualifiedName xNetworking' to see available versions on the system, and then use the fully qualified name '@{ModuleName="xNetworking"; RequiredVersion="Version"}'.</message>
              <stack-trace>at &lt;ScriptBlock&gt;, C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDhcpClient.Integration.Tests.ps1: line 30</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDnsClientGlobalSetting.Integration.Tests.ps1" executed="True" result="Failure" success="False" time="1.2554" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDnsClientGlobalSetting.Integration.Tests.ps1">
        <results>
          <test-case description="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDnsClientGlobalSetting.Integration.Tests.ps1'" name="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDnsClientGlobalSetting.Integration.Tests.ps1'" time="1.2554" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDnsClientGlobalSetting.config.ps1:2 char:5
+     Import-DscResource -ModuleName xNetworking
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Multiple versions of the module 'xNetworking' were found. You can run 'Get-Module -ListAvailable -FullyQualifiedName xNetworking' to see available versions on the system, and then use the fully qualified name '@{ModuleName="xNetworking"; RequiredVersion="Version"}'.</message>
              <stack-trace>at &lt;ScriptBlock&gt;, C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDnsClientGlobalSetting.Integration.Tests.ps1: line 58</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDNSConnectionSuffix.Integration.Tests.ps1" executed="True" result="Failure" success="False" time="13.0161" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDNSConnectionSuffix.Integration.Tests.ps1">
        <results>
          <test-case description="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDNSConnectionSuffix.Integration.Tests.ps1'" name="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDNSConnectionSuffix.Integration.Tests.ps1'" time="13.0161" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDnsConnectionSuffix.config.ps1:10 char:5
+     Import-DscResource -ModuleName xNetworking
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Multiple versions of the module 'xNetworking' were found. You can run 'Get-Module -ListAvailable -FullyQualifiedName xNetworking' to see available versions on the system, and then use the fully qualified name '@{ModuleName="xNetworking"; RequiredVersion="Version"}'.</message>
              <stack-trace>at &lt;ScriptBlock&gt;, C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDNSConnectionSuffix.Integration.Tests.ps1: line 30</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDNSServerAddress.Integration.Tests.ps1" executed="True" result="Failure" success="False" time="11.9518" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDNSServerAddress.Integration.Tests.ps1">
        <results>
          <test-case description="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDNSServerAddress.Integration.Tests.ps1'" name="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDNSServerAddress.Integration.Tests.ps1'" time="11.9518" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDNSServerAddress.config.ps1:9 char:5
+     Import-DscResource -ModuleName xNetworking
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Multiple versions of the module 'xNetworking' were found. You can run 'Get-Module -ListAvailable -FullyQualifiedName xNetworking' to see available versions on the system, and then use the fully qualified name '@{ModuleName="xNetworking"; RequiredVersion="Version"}'.</message>
              <stack-trace>at &lt;ScriptBlock&gt;, C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xDNSServerAddress.Integration.Tests.ps1: line 30</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xFirewall.Integration.Tests.ps1" executed="True" result="Failure" success="False" time="1.5972" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xFirewall.Integration.Tests.ps1">
        <results>
          <test-case description="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xFirewall.Integration.Tests.ps1'" name="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xFirewall.Integration.Tests.ps1'" time="1.5972" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xFirewall_add.config.ps1:6 char:5
+     Import-DscResource -ModuleName xNetworking
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Multiple versions of the module 'xNetworking' were found. You can run 'Get-Module -ListAvailable -FullyQualifiedName xNetworking' to see available versions on the system, and then use the fully qualified name '@{ModuleName="xNetworking"; RequiredVersion="Version"}'.

At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xFirewall_add.config.ps1:11 char:37
+             Group                 = $Node.Group
+                                     ~~~~~
Unexpected token '$Node' in expression or statement.

At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xFirewall_add.config.ps1:22 char:37
+             Service               = $Node.Service
+                                     ~~~~~
Unexpected token '$Node' in expression or statement.

At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xFirewall_add.config.ps1:29 char:37
+             Package               = $Node.Package
+                                     ~~~~~
Unexpected token '$Node' in expression or statement.</message>
              <stack-trace>at &lt;ScriptBlock&gt;, C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xFirewall.Integration.Tests.ps1: line 81</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xHostsFile.Integration.Tests.ps1" executed="True" result="Failure" success="False" time="2.7327" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xHostsFile.Integration.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="MSFT_xHostsFile_Integration - Add Single Line" executed="True" result="Failure" success="False" time="1.0529" asserts="0" description="MSFT_xHostsFile_Integration - Add Single Line">
            <results>
              <test-case description="Error occurred in Describe block" name="MSFT_xHostsFile_Integration - Add Single Line.Error occurred in Describe block" time="1.0529" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xHostsFile_add.config.ps1:15 char:5
+     Import-DSCResource -ModuleName xNetworking
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Multiple versions of the module 'xNetworking' were found. You can run 'Get-Module -ListAvailable -FullyQualifiedName xNetworking' to see available versions on the system, and then use the fully qualified name '@{ModuleName="xNetworking"; RequiredVersion="Version"}'.

At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xHostsFile_add.config.ps1:19 char:9
+         xHostsFile HostEntry
+         ~~~~~~~~~~
Undefined DSC resource 'xHostsFile'. Use Import-DSCResource to import the resource.</message>
                  <stack-trace>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xHostsFile_add.config.ps1:15 char:5</stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xHostsFile_Integration - Add Multiple Line" executed="True" result="Failure" success="False" time="0.8402" asserts="0" description="MSFT_xHostsFile_Integration - Add Multiple Line">
            <results>
              <test-case description="Error occurred in Describe block" name="MSFT_xHostsFile_Integration - Add Multiple Line.Error occurred in Describe block" time="0.8402" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xHostsFile_modify.config.ps1:15 char:5
+     Import-DSCResource -ModuleName xNetworking
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Multiple versions of the module 'xNetworking' were found. You can run 'Get-Module -ListAvailable -FullyQualifiedName xNetworking' to see available versions on the system, and then use the fully qualified name '@{ModuleName="xNetworking"; RequiredVersion="Version"}'.

At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xHostsFile_modify.config.ps1:19 char:9
+         xHostsFile HostEntry
+         ~~~~~~~~~~
Undefined DSC resource 'xHostsFile'. Use Import-DSCResource to import the resource.</message>
                  <stack-trace>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xHostsFile_modify.config.ps1:15 char:5</stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="MSFT_xHostsFile_Integration - Remove Single Line" executed="True" result="Failure" success="False" time="0.8396" asserts="0" description="MSFT_xHostsFile_Integration - Remove Single Line">
            <results>
              <test-case description="Error occurred in Describe block" name="MSFT_xHostsFile_Integration - Remove Single Line.Error occurred in Describe block" time="0.8396" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xHostsFile_remove.config.ps1:14 char:5
+     Import-DSCResource -ModuleName xNetworking
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Multiple versions of the module 'xNetworking' were found. You can run 'Get-Module -ListAvailable -FullyQualifiedName xNetworking' to see available versions on the system, and then use the fully qualified name '@{ModuleName="xNetworking"; RequiredVersion="Version"}'.

At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xHostsFile_remove.config.ps1:18 char:9
+         xHostsFile HostEntry
+         ~~~~~~~~~~
Undefined DSC resource 'xHostsFile'. Use Import-DSCResource to import the resource.</message>
                  <stack-trace>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xHostsFile_remove.config.ps1:14 char:5</stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xIPAddress.Integration.Tests.ps1" executed="True" result="Failure" success="False" time="12.8544" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xIPAddress.Integration.Tests.ps1">
        <results>
          <test-case description="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xIPAddress.Integration.Tests.ps1'" name="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xIPAddress.Integration.Tests.ps1'" time="12.8544" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xIPAddress.config.ps1:9 char:5
+     Import-DscResource -ModuleName xNetworking
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Multiple versions of the module 'xNetworking' were found. You can run 'Get-Module -ListAvailable -FullyQualifiedName xNetworking' to see available versions on the system, and then use the fully qualified name '@{ModuleName="xNetworking"; RequiredVersion="Version"}'.</message>
              <stack-trace>at &lt;ScriptBlock&gt;, C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xIPAddress.Integration.Tests.ps1: line 30</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetAdapterBinding.Integration.Tests.ps1" executed="True" result="Failure" success="False" time="13.276" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetAdapterBinding.Integration.Tests.ps1">
        <results>
          <test-case description="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetAdapterBinding.Integration.Tests.ps1'" name="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetAdapterBinding.Integration.Tests.ps1'" time="13.276" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetAdapterBinding.config.ps1:8 char:5
+     Import-DscResource -ModuleName xNetworking
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Multiple versions of the module 'xNetworking' were found. You can run 'Get-Module -ListAvailable -FullyQualifiedName xNetworking' to see available versions on the system, and then use the fully qualified name '@{ModuleName="xNetworking"; RequiredVersion="Version"}'.</message>
              <stack-trace>at &lt;ScriptBlock&gt;, C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetAdapterBinding.Integration.Tests.ps1: line 30</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetAdapterRDMA.Integration.Tests.ps1" executed="True" result="Success" success="True" time="0" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetAdapterRDMA.Integration.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetBIOS.Integration.Tests.ps1" executed="True" result="Failure" success="False" time="2.1344" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetBIOS.Integration.Tests.ps1">
        <results>
          <test-case description="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetBIOS.Integration.Tests.ps1'" name="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetBIOS.Integration.Tests.ps1'" time="2.1344" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetBIOS.config.ps1:29 char:5
+     Import-DscResource -ModuleName xNetworking
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Multiple versions of the module 'xNetworking' were found. You can run 'Get-Module -ListAvailable -FullyQualifiedName xNetworking' to see available versions on the system, and then use the fully qualified name '@{ModuleName="xNetworking"; RequiredVersion="Version"}'.</message>
              <stack-trace>at &lt;ScriptBlock&gt;, C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetBIOS.Integration.Tests.ps1: line 26</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetConnectionProfile.Integration.Tests.ps1" executed="True" result="Failure" success="False" time="1.508" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetConnectionProfile.Integration.Tests.ps1">
        <results>
          <test-case description="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetConnectionProfile.Integration.Tests.ps1'" name="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetConnectionProfile.Integration.Tests.ps1'" time="1.508" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>At C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetConnectionProfile.config.ps1:4 char:5
+     Import-DscResource -ModuleName xNetworking
+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Multiple versions of the module 'xNetworking' were found. You can run 'Get-Module -ListAvailable -FullyQualifiedName xNetworking' to see available versions on the system, and then use the fully qualified name '@{ModuleName="xNetworking"; RequiredVersion="Version"}'.</message>
              <stack-trace>at &lt;ScriptBlock&gt;, C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetConnectionProfile.Integration.Tests.ps1: line 26</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetworkTeam.Integration.Tests.ps1" executed="True" result="Success" success="True" time="0" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetworkTeam.Integration.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetworkTeamInterface.Integration.Tests.ps1" executed="True" result="Success" success="True" time="0" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xNetworkTeamInterface.Integration.Tests.ps1">
        <results />
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xRoute.Integration.Tests.ps1" executed="True" result="Failure" success="False" time="1.3015" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xRoute.Integration.Tests.ps1">
        <results>
          <test-case description="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xRoute.Integration.Tests.ps1'" name="Error occurred in test script 'C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xRoute.Integration.Tests.ps1'" time="1.3015" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>Cannot validate argument on parameter 'DestinationPrefix'. The argument is null. Provide a valid value for the argument, and then try running the command again.</message>
              <stack-trace>at &lt;ScriptBlock&gt;, C:\Users\Daniel\Source\GitHub\xNetworking\Tests\Integration\MSFT_xRoute.Integration.Tests.ps1: line 110</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1" executed="True" result="Failure" success="False" time="183.2874" asserts="0" description="C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Common Tests - File Formatting" executed="True" result="Failure" success="False" time="0.957" asserts="0" description="Common Tests - File Formatting">
            <results>
              <test-case description="Should not contain any files with Unicode file encoding" name="Common Tests - File Formatting.Should not contain any files with Unicode file encoding" time="0.604" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should not contain any files with tab characters" name="Common Tests - File Formatting.Should not contain any files with tab characters" time="0.1319" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should not contain empty files" name="Common Tests - File Formatting.Should not contain empty files" time="0.105" asserts="0" success="True" result="Success" executed="True" />
              <test-case description="Should not contain files without a newline at the end" name="Common Tests - File Formatting.Should not contain files without a newline at the end" time="0.1162" asserts="0" success="False" result="Failure" executed="True">
                <failure>
                  <message>Expected: {False}
But was:  {True}</message>
                  <stack-trace>at line: 122 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
122:         $containsFileWithoutNewLine | Should Be $false
</stack-trace>
                </failure>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Common Tests - .psm1 File Parsing" executed="True" result="Success" success="True" time="1.7964" asserts="0" description="Common Tests - .psm1 File Parsing">
            <results>
              <test-suite type="TestFixture" name="xNetworkAdapter.psm1" executed="True" result="Success" success="True" time="0.1023" asserts="0" description="xNetworkAdapter.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.xNetworkAdapter.psm1.Should not contain parse errors" time="0.1023" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="AppVeyor.psm1" executed="True" result="Success" success="True" time="0.0487" asserts="0" description="AppVeyor.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.AppVeyor.psm1.Should not contain parse errors" time="0.0487" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MetaFixers.psm1" executed="True" result="Success" success="True" time="0.0448" asserts="0" description="MetaFixers.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MetaFixers.psm1.Should not contain parse errors" time="0.0448" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TestHelper.psm1" executed="True" result="Success" success="True" time="0.0507" asserts="0" description="TestHelper.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.TestHelper.psm1.Should not contain parse errors" time="0.0507" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TestRunner.psm1" executed="True" result="Success" success="True" time="0.1007" asserts="0" description="TestRunner.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.TestRunner.psm1.Should not contain parse errors" time="0.1007" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MofHelper.psm1" executed="True" result="Success" success="True" time="0.0849" asserts="0" description="MofHelper.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MofHelper.psm1.Should not contain parse errors" time="0.0849" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PowerShellHelp.psm1" executed="True" result="Success" success="True" time="0.0688" asserts="0" description="PowerShellHelp.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.PowerShellHelp.psm1.Should not contain parse errors" time="0.0688" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="WikiPages.psm1" executed="True" result="Success" success="True" time="0.0581" asserts="0" description="WikiPages.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.WikiPages.psm1.Should not contain parse errors" time="0.0581" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xDefaultGatewayAddress.psm1" executed="True" result="Success" success="True" time="0.0707" asserts="0" description="MSFT_xDefaultGatewayAddress.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MSFT_xDefaultGatewayAddress.psm1.Should not contain parse errors" time="0.0707" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xDhcpClient.psm1" executed="True" result="Success" success="True" time="0.0516" asserts="0" description="MSFT_xDhcpClient.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MSFT_xDhcpClient.psm1.Should not contain parse errors" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xDnsClientGlobalSetting.psm1" executed="True" result="Success" success="True" time="0.0533" asserts="0" description="MSFT_xDnsClientGlobalSetting.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MSFT_xDnsClientGlobalSetting.psm1.Should not contain parse errors" time="0.0533" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xDnsConnectionSuffix.psm1" executed="True" result="Success" success="True" time="0.057" asserts="0" description="MSFT_xDnsConnectionSuffix.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MSFT_xDnsConnectionSuffix.psm1.Should not contain parse errors" time="0.057" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xDNSServerAddress.psm1" executed="True" result="Success" success="True" time="0.0591" asserts="0" description="MSFT_xDNSServerAddress.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MSFT_xDNSServerAddress.psm1.Should not contain parse errors" time="0.0591" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xFirewall.psm1" executed="True" result="Success" success="True" time="0.0616" asserts="0" description="MSFT_xFirewall.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MSFT_xFirewall.psm1.Should not contain parse errors" time="0.0616" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xHostsFile.psm1" executed="True" result="Success" success="True" time="0.0544" asserts="0" description="MSFT_xHostsFile.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MSFT_xHostsFile.psm1.Should not contain parse errors" time="0.0544" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xIPAddress.psm1" executed="True" result="Success" success="True" time="0.0815" asserts="0" description="MSFT_xIPAddress.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MSFT_xIPAddress.psm1.Should not contain parse errors" time="0.0815" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetAdapterBinding.psm1" executed="True" result="Success" success="True" time="0.0802" asserts="0" description="MSFT_xNetAdapterBinding.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MSFT_xNetAdapterBinding.psm1.Should not contain parse errors" time="0.0802" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetAdapterRDMA.psm1" executed="True" result="Success" success="True" time="0.0704" asserts="0" description="MSFT_xNetAdapterRDMA.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MSFT_xNetAdapterRDMA.psm1.Should not contain parse errors" time="0.0704" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetBIOS.psm1" executed="True" result="Success" success="True" time="0.1075" asserts="0" description="MSFT_xNetBIOS.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MSFT_xNetBIOS.psm1.Should not contain parse errors" time="0.1075" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetConnectionProfile.psm1" executed="True" result="Success" success="True" time="0.0803" asserts="0" description="MSFT_xNetConnectionProfile.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MSFT_xNetConnectionProfile.psm1.Should not contain parse errors" time="0.0803" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetworkTeam.psm1" executed="True" result="Success" success="True" time="0.0899" asserts="0" description="MSFT_xNetworkTeam.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MSFT_xNetworkTeam.psm1.Should not contain parse errors" time="0.0899" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetworkTeamInterface.psm1" executed="True" result="Success" success="True" time="0.093" asserts="0" description="MSFT_xNetworkTeamInterface.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MSFT_xNetworkTeamInterface.psm1.Should not contain parse errors" time="0.093" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xRoute.psm1" executed="True" result="Success" success="True" time="0.1075" asserts="0" description="MSFT_xRoute.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.MSFT_xRoute.psm1.Should not contain parse errors" time="0.1075" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NetworkingDsc.Common.psm1" executed="True" result="Success" success="True" time="0.0596" asserts="0" description="NetworkingDsc.Common.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.NetworkingDsc.Common.psm1.Should not contain parse errors" time="0.0596" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NetworkingDsc.ResourceHelper.psm1" executed="True" result="Success" success="True" time="0.06" asserts="0" description="NetworkingDsc.ResourceHelper.psm1">
                <results>
                  <test-case description="Should not contain parse errors" name="Common Tests - .psm1 File Parsing.NetworkingDsc.ResourceHelper.psm1.Should not contain parse errors" time="0.06" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Common Tests - Module Manifest" executed="True" result="Success" success="True" time="0.2038" asserts="0" description="Common Tests - Module Manifest">
            <results>
              <test-case description="Should contain a PowerShellVersion property of at least 4.0 based on resource types" name="Common Tests - Module Manifest.Should contain a PowerShellVersion property of at least 4.0 based on resource types" time="0.2038" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Common Tests - Script Resource Schema Validation" executed="True" result="Success" success="True" time="9.4767" asserts="0" description="Common Tests - Script Resource Schema Validation">
            <results>
              <test-suite type="TestFixture" name="MSFT_xDefaultGatewayAddress" executed="True" result="Success" success="True" time="2.3449" asserts="0" description="MSFT_xDefaultGatewayAddress">
                <results>
                  <test-case description="Should pass Test-xDscResource" name="Common Tests - Script Resource Schema Validation.MSFT_xDefaultGatewayAddress.Should pass Test-xDscResource" time="2.0588" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass Test-xDscSchema" name="Common Tests - Script Resource Schema Validation.MSFT_xDefaultGatewayAddress.Should pass Test-xDscSchema" time="0.286" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xDhcpClient" executed="True" result="Success" success="True" time="0.4836" asserts="0" description="MSFT_xDhcpClient">
                <results>
                  <test-case description="Should pass Test-xDscResource" name="Common Tests - Script Resource Schema Validation.MSFT_xDhcpClient.Should pass Test-xDscResource" time="0.262" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass Test-xDscSchema" name="Common Tests - Script Resource Schema Validation.MSFT_xDhcpClient.Should pass Test-xDscSchema" time="0.2215" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xDnsClientGlobalSetting" executed="True" result="Success" success="True" time="0.4935" asserts="0" description="MSFT_xDnsClientGlobalSetting">
                <results>
                  <test-case description="Should pass Test-xDscResource" name="Common Tests - Script Resource Schema Validation.MSFT_xDnsClientGlobalSetting.Should pass Test-xDscResource" time="0.3296" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass Test-xDscSchema" name="Common Tests - Script Resource Schema Validation.MSFT_xDnsClientGlobalSetting.Should pass Test-xDscSchema" time="0.1639" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xDnsConnectionSuffix" executed="True" result="Success" success="True" time="0.5265" asserts="0" description="MSFT_xDnsConnectionSuffix">
                <results>
                  <test-case description="Should pass Test-xDscResource" name="Common Tests - Script Resource Schema Validation.MSFT_xDnsConnectionSuffix.Should pass Test-xDscResource" time="0.3254" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass Test-xDscSchema" name="Common Tests - Script Resource Schema Validation.MSFT_xDnsConnectionSuffix.Should pass Test-xDscSchema" time="0.2011" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xDNSServerAddress" executed="True" result="Success" success="True" time="0.5947" asserts="0" description="MSFT_xDNSServerAddress">
                <results>
                  <test-case description="Should pass Test-xDscResource" name="Common Tests - Script Resource Schema Validation.MSFT_xDNSServerAddress.Should pass Test-xDscResource" time="0.4062" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass Test-xDscSchema" name="Common Tests - Script Resource Schema Validation.MSFT_xDNSServerAddress.Should pass Test-xDscSchema" time="0.1885" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xFirewall" executed="True" result="Success" success="True" time="1.1441" asserts="0" description="MSFT_xFirewall">
                <results>
                  <test-case description="Should pass Test-xDscResource" name="Common Tests - Script Resource Schema Validation.MSFT_xFirewall.Should pass Test-xDscResource" time="0.7773" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass Test-xDscSchema" name="Common Tests - Script Resource Schema Validation.MSFT_xFirewall.Should pass Test-xDscSchema" time="0.3667" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xHostsFile" executed="True" result="Success" success="True" time="0.3927" asserts="0" description="MSFT_xHostsFile">
                <results>
                  <test-case description="Should pass Test-xDscResource" name="Common Tests - Script Resource Schema Validation.MSFT_xHostsFile.Should pass Test-xDscResource" time="0.2625" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass Test-xDscSchema" name="Common Tests - Script Resource Schema Validation.MSFT_xHostsFile.Should pass Test-xDscSchema" time="0.1302" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xIPAddress" executed="True" result="Success" success="True" time="0.3448" asserts="0" description="MSFT_xIPAddress">
                <results>
                  <test-case description="Should pass Test-xDscResource" name="Common Tests - Script Resource Schema Validation.MSFT_xIPAddress.Should pass Test-xDscResource" time="0.2281" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass Test-xDscSchema" name="Common Tests - Script Resource Schema Validation.MSFT_xIPAddress.Should pass Test-xDscSchema" time="0.1167" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetAdapterBinding" executed="True" result="Success" success="True" time="0.4088" asserts="0" description="MSFT_xNetAdapterBinding">
                <results>
                  <test-case description="Should pass Test-xDscResource" name="Common Tests - Script Resource Schema Validation.MSFT_xNetAdapterBinding.Should pass Test-xDscResource" time="0.2583" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass Test-xDscSchema" name="Common Tests - Script Resource Schema Validation.MSFT_xNetAdapterBinding.Should pass Test-xDscSchema" time="0.1504" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetAdapterRDMA" executed="True" result="Success" success="True" time="0.4487" asserts="0" description="MSFT_xNetAdapterRDMA">
                <results>
                  <test-case description="Should pass Test-xDscResource" name="Common Tests - Script Resource Schema Validation.MSFT_xNetAdapterRDMA.Should pass Test-xDscResource" time="0.2995" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass Test-xDscSchema" name="Common Tests - Script Resource Schema Validation.MSFT_xNetAdapterRDMA.Should pass Test-xDscSchema" time="0.1492" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetBIOS" executed="True" result="Success" success="True" time="0.4124" asserts="0" description="MSFT_xNetBIOS">
                <results>
                  <test-case description="Should pass Test-xDscResource" name="Common Tests - Script Resource Schema Validation.MSFT_xNetBIOS.Should pass Test-xDscResource" time="0.2737" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass Test-xDscSchema" name="Common Tests - Script Resource Schema Validation.MSFT_xNetBIOS.Should pass Test-xDscSchema" time="0.1386" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetConnectionProfile" executed="True" result="Success" success="True" time="0.464" asserts="0" description="MSFT_xNetConnectionProfile">
                <results>
                  <test-case description="Should pass Test-xDscResource" name="Common Tests - Script Resource Schema Validation.MSFT_xNetConnectionProfile.Should pass Test-xDscResource" time="0.3211" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass Test-xDscSchema" name="Common Tests - Script Resource Schema Validation.MSFT_xNetConnectionProfile.Should pass Test-xDscSchema" time="0.1428" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetworkTeam" executed="True" result="Success" success="True" time="0.4463" asserts="0" description="MSFT_xNetworkTeam">
                <results>
                  <test-case description="Should pass Test-xDscResource" name="Common Tests - Script Resource Schema Validation.MSFT_xNetworkTeam.Should pass Test-xDscResource" time="0.2783" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass Test-xDscSchema" name="Common Tests - Script Resource Schema Validation.MSFT_xNetworkTeam.Should pass Test-xDscSchema" time="0.168" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetworkTeamInterface" executed="True" result="Success" success="True" time="0.3711" asserts="0" description="MSFT_xNetworkTeamInterface">
                <results>
                  <test-case description="Should pass Test-xDscResource" name="Common Tests - Script Resource Schema Validation.MSFT_xNetworkTeamInterface.Should pass Test-xDscResource" time="0.2257" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass Test-xDscSchema" name="Common Tests - Script Resource Schema Validation.MSFT_xNetworkTeamInterface.Should pass Test-xDscSchema" time="0.1454" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xRoute" executed="True" result="Success" success="True" time="0.6009" asserts="0" description="MSFT_xRoute">
                <results>
                  <test-case description="Should pass Test-xDscResource" name="Common Tests - Script Resource Schema Validation.MSFT_xRoute.Should pass Test-xDscResource" time="0.4243" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass Test-xDscSchema" name="Common Tests - Script Resource Schema Validation.MSFT_xRoute.Should pass Test-xDscSchema" time="0.1766" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Common Tests - PS Script Analyzer on Resource Files" executed="True" result="Success" success="True" time="122.757" asserts="0" description="Common Tests - PS Script Analyzer on Resource Files">
            <results>
              <test-suite type="TestFixture" name="MSFT_xDefaultGatewayAddress.psm1" executed="True" result="Success" success="True" time="11.1373" asserts="0" description="MSFT_xDefaultGatewayAddress.psm1">
                <results>
                  <test-case description="Should pass all error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDefaultGatewayAddress.psm1.Should pass all error-level PS Script Analyzer rules" time="2.2635" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDefaultGatewayAddress.psm1.Should pass all required PS Script Analyzer rules" time="2.5043" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all flagged PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDefaultGatewayAddress.psm1.Should pass all flagged PS Script Analyzer rules" time="6.2205" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass any recently-added, error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDefaultGatewayAddress.psm1.Should pass any recently-added, error-level PS Script Analyzer rules" time="0.0823" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not suppress any required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDefaultGatewayAddress.psm1.Should not suppress any required PS Script Analyzer rules" time="0.0667" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xDhcpClient.psm1" executed="True" result="Success" success="True" time="6.6276" asserts="0" description="MSFT_xDhcpClient.psm1">
                <results>
                  <test-case description="Should pass all error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDhcpClient.psm1.Should pass all error-level PS Script Analyzer rules" time="0.0973" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDhcpClient.psm1.Should pass all required PS Script Analyzer rules" time="3.4985" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all flagged PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDhcpClient.psm1.Should pass all flagged PS Script Analyzer rules" time="2.9369" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass any recently-added, error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDhcpClient.psm1.Should pass any recently-added, error-level PS Script Analyzer rules" time="0.0628" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not suppress any required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDhcpClient.psm1.Should not suppress any required PS Script Analyzer rules" time="0.0321" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xDnsClientGlobalSetting.psm1" executed="True" result="Success" success="True" time="3.3443" asserts="0" description="MSFT_xDnsClientGlobalSetting.psm1">
                <results>
                  <test-case description="Should pass all error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDnsClientGlobalSetting.psm1.Should pass all error-level PS Script Analyzer rules" time="0.1097" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDnsClientGlobalSetting.psm1.Should pass all required PS Script Analyzer rules" time="1.0868" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all flagged PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDnsClientGlobalSetting.psm1.Should pass all flagged PS Script Analyzer rules" time="2.0471" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass any recently-added, error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDnsClientGlobalSetting.psm1.Should pass any recently-added, error-level PS Script Analyzer rules" time="0.0707" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not suppress any required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDnsClientGlobalSetting.psm1.Should not suppress any required PS Script Analyzer rules" time="0.03" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xDnsConnectionSuffix.psm1" executed="True" result="Success" success="True" time="4.0965" asserts="0" description="MSFT_xDnsConnectionSuffix.psm1">
                <results>
                  <test-case description="Should pass all error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDnsConnectionSuffix.psm1.Should pass all error-level PS Script Analyzer rules" time="0.0719" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDnsConnectionSuffix.psm1.Should pass all required PS Script Analyzer rules" time="1.0663" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all flagged PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDnsConnectionSuffix.psm1.Should pass all flagged PS Script Analyzer rules" time="2.8418" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass any recently-added, error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDnsConnectionSuffix.psm1.Should pass any recently-added, error-level PS Script Analyzer rules" time="0.0714" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not suppress any required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDnsConnectionSuffix.psm1.Should not suppress any required PS Script Analyzer rules" time="0.045" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xDNSServerAddress.psm1" executed="True" result="Success" success="True" time="8.4875" asserts="0" description="MSFT_xDNSServerAddress.psm1">
                <results>
                  <test-case description="Should pass all error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDNSServerAddress.psm1.Should pass all error-level PS Script Analyzer rules" time="0.0905" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDNSServerAddress.psm1.Should pass all required PS Script Analyzer rules" time="2.4239" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all flagged PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDNSServerAddress.psm1.Should pass all flagged PS Script Analyzer rules" time="5.8807" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass any recently-added, error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDNSServerAddress.psm1.Should pass any recently-added, error-level PS Script Analyzer rules" time="0.0661" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not suppress any required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xDNSServerAddress.psm1.Should not suppress any required PS Script Analyzer rules" time="0.0262" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xFirewall.psm1" executed="True" result="Success" success="True" time="26.3385" asserts="0" description="MSFT_xFirewall.psm1">
                <results>
                  <test-case description="Should pass all error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xFirewall.psm1.Should pass all error-level PS Script Analyzer rules" time="0.0837" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xFirewall.psm1.Should pass all required PS Script Analyzer rules" time="11.4749" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all flagged PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xFirewall.psm1.Should pass all flagged PS Script Analyzer rules" time="14.6812" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass any recently-added, error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xFirewall.psm1.Should pass any recently-added, error-level PS Script Analyzer rules" time="0.0644" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not suppress any required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xFirewall.psm1.Should not suppress any required PS Script Analyzer rules" time="0.0343" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xHostsFile.psm1" executed="True" result="Success" success="True" time="5.734" asserts="0" description="MSFT_xHostsFile.psm1">
                <results>
                  <test-case description="Should pass all error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xHostsFile.psm1.Should pass all error-level PS Script Analyzer rules" time="0.0765" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xHostsFile.psm1.Should pass all required PS Script Analyzer rules" time="2.9011" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all flagged PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xHostsFile.psm1.Should pass all flagged PS Script Analyzer rules" time="2.6717" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass any recently-added, error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xHostsFile.psm1.Should pass any recently-added, error-level PS Script Analyzer rules" time="0.0541" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not suppress any required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xHostsFile.psm1.Should not suppress any required PS Script Analyzer rules" time="0.0306" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xIPAddress.psm1" executed="True" result="Success" success="True" time="9.7222" asserts="0" description="MSFT_xIPAddress.psm1">
                <results>
                  <test-case description="Should pass all error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xIPAddress.psm1.Should pass all error-level PS Script Analyzer rules" time="0.077" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xIPAddress.psm1.Should pass all required PS Script Analyzer rules" time="1.8757" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all flagged PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xIPAddress.psm1.Should pass all flagged PS Script Analyzer rules" time="7.688" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass any recently-added, error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xIPAddress.psm1.Should pass any recently-added, error-level PS Script Analyzer rules" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not suppress any required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xIPAddress.psm1.Should not suppress any required PS Script Analyzer rules" time="0.0307" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetAdapterBinding.psm1" executed="True" result="Success" success="True" time="8.5129" asserts="0" description="MSFT_xNetAdapterBinding.psm1">
                <results>
                  <test-case description="Should pass all error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetAdapterBinding.psm1.Should pass all error-level PS Script Analyzer rules" time="0.0917" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetAdapterBinding.psm1.Should pass all required PS Script Analyzer rules" time="3.2227" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all flagged PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetAdapterBinding.psm1.Should pass all flagged PS Script Analyzer rules" time="5.079" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass any recently-added, error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetAdapterBinding.psm1.Should pass any recently-added, error-level PS Script Analyzer rules" time="0.0756" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not suppress any required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetAdapterBinding.psm1.Should not suppress any required PS Script Analyzer rules" time="0.0439" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetAdapterRDMA.psm1" executed="True" result="Success" success="True" time="4.4291" asserts="0" description="MSFT_xNetAdapterRDMA.psm1">
                <results>
                  <test-case description="Should pass all error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetAdapterRDMA.psm1.Should pass all error-level PS Script Analyzer rules" time="0.1023" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetAdapterRDMA.psm1.Should pass all required PS Script Analyzer rules" time="1.3251" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all flagged PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetAdapterRDMA.psm1.Should pass all flagged PS Script Analyzer rules" time="2.8633" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass any recently-added, error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetAdapterRDMA.psm1.Should pass any recently-added, error-level PS Script Analyzer rules" time="0.0835" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not suppress any required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetAdapterRDMA.psm1.Should not suppress any required PS Script Analyzer rules" time="0.0548" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetBIOS.psm1" executed="True" result="Success" success="True" time="5.4851" asserts="0" description="MSFT_xNetBIOS.psm1">
                <results>
                  <test-case description="Should pass all error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetBIOS.psm1.Should pass all error-level PS Script Analyzer rules" time="0.1546" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetBIOS.psm1.Should pass all required PS Script Analyzer rules" time="1.0883" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all flagged PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetBIOS.psm1.Should pass all flagged PS Script Analyzer rules" time="4.1552" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass any recently-added, error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetBIOS.psm1.Should pass any recently-added, error-level PS Script Analyzer rules" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not suppress any required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetBIOS.psm1.Should not suppress any required PS Script Analyzer rules" time="0.0364" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetConnectionProfile.psm1" executed="True" result="Success" success="True" time="2.5937" asserts="0" description="MSFT_xNetConnectionProfile.psm1">
                <results>
                  <test-case description="Should pass all error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetConnectionProfile.psm1.Should pass all error-level PS Script Analyzer rules" time="0.0974" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetConnectionProfile.psm1.Should pass all required PS Script Analyzer rules" time="1.316" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all flagged PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetConnectionProfile.psm1.Should pass all flagged PS Script Analyzer rules" time="1.0979" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass any recently-added, error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetConnectionProfile.psm1.Should pass any recently-added, error-level PS Script Analyzer rules" time="0.0558" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not suppress any required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetConnectionProfile.psm1.Should not suppress any required PS Script Analyzer rules" time="0.0266" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetworkTeam.psm1" executed="True" result="Success" success="True" time="6.4898" asserts="0" description="MSFT_xNetworkTeam.psm1">
                <results>
                  <test-case description="Should pass all error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetworkTeam.psm1.Should pass all error-level PS Script Analyzer rules" time="0.0954" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetworkTeam.psm1.Should pass all required PS Script Analyzer rules" time="1.3523" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all flagged PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetworkTeam.psm1.Should pass all flagged PS Script Analyzer rules" time="4.9555" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass any recently-added, error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetworkTeam.psm1.Should pass any recently-added, error-level PS Script Analyzer rules" time="0.0619" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not suppress any required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetworkTeam.psm1.Should not suppress any required PS Script Analyzer rules" time="0.0247" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xNetworkTeamInterface.psm1" executed="True" result="Success" success="True" time="6.2497" asserts="0" description="MSFT_xNetworkTeamInterface.psm1">
                <results>
                  <test-case description="Should pass all error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetworkTeamInterface.psm1.Should pass all error-level PS Script Analyzer rules" time="0.0969" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetworkTeamInterface.psm1.Should pass all required PS Script Analyzer rules" time="1.0731" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all flagged PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetworkTeamInterface.psm1.Should pass all flagged PS Script Analyzer rules" time="5.0094" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass any recently-added, error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetworkTeamInterface.psm1.Should pass any recently-added, error-level PS Script Analyzer rules" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not suppress any required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xNetworkTeamInterface.psm1.Should not suppress any required PS Script Analyzer rules" time="0.0212" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MSFT_xRoute.psm1" executed="True" result="Success" success="True" time="13.5088" asserts="0" description="MSFT_xRoute.psm1">
                <results>
                  <test-case description="Should pass all error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xRoute.psm1.Should pass all error-level PS Script Analyzer rules" time="0.1088" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xRoute.psm1.Should pass all required PS Script Analyzer rules" time="4.6761" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass all flagged PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xRoute.psm1.Should pass all flagged PS Script Analyzer rules" time="8.6107" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should pass any recently-added, error-level PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xRoute.psm1.Should pass any recently-added, error-level PS Script Analyzer rules" time="0.0688" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="Should not suppress any required PS Script Analyzer rules" name="Common Tests - PS Script Analyzer on Resource Files.MSFT_xRoute.psm1.Should not suppress any required PS Script Analyzer rules" time="0.0444" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Common Tests - Validate Example Files" executed="True" result="Failure" success="False" time="20.7708" asserts="0" description="Common Tests - Validate Example Files">
            <results>
              <test-suite type="TestFixture" name="1-RemoveDefaultGateway.ps1" executed="True" result="Failure" success="False" time="0.9658" asserts="0" description="1-RemoveDefaultGateway.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.1-RemoveDefaultGateway.ps1.Should compile MOFs for example correctly" time="0.9658" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="2-SetDefaultGateway.ps1" executed="True" result="Failure" success="False" time="0.9069" asserts="0" description="2-SetDefaultGateway.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.2-SetDefaultGateway.ps1.Should compile MOFs for example correctly" time="0.9069" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="1-EnableDHCP.ps1" executed="True" result="Failure" success="False" time="0.9146" asserts="0" description="1-EnableDHCP.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.1-EnableDHCP.ps1.Should compile MOFs for example correctly" time="0.9146" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="1-ConfigureSuffixSearchList.ps1" executed="True" result="Failure" success="False" time="0.8892" asserts="0" description="1-ConfigureSuffixSearchList.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.1-ConfigureSuffixSearchList.ps1.Should compile MOFs for example correctly" time="0.8892" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="1-AddSpecificSuffix.ps1" executed="True" result="Failure" success="False" time="0.9126" asserts="0" description="1-AddSpecificSuffix.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.1-AddSpecificSuffix.ps1.Should compile MOFs for example correctly" time="0.9126" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="1-xDnsServerAddress.ps1" executed="True" result="Failure" success="False" time="0.8783" asserts="0" description="1-xDnsServerAddress.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.1-xDnsServerAddress.ps1.Should compile MOFs for example correctly" time="0.8783" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="1-xFirewall_AddFirewallRule.ps1" executed="True" result="Failure" success="False" time="0.9046" asserts="0" description="1-xFirewall_AddFirewallRule.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.1-xFirewall_AddFirewallRule.ps1.Should compile MOFs for example correctly" time="0.9046" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="2-xFirewall_AddFirewallRule_AllParameters.ps1" executed="True" result="Failure" success="False" time="0.8717" asserts="0" description="2-xFirewall_AddFirewallRule_AllParameters.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.2-xFirewall_AddFirewallRule_AllParameters.ps1.Should compile MOFs for example correctly" time="0.8717" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="3-xFirewall_AddFirewallRuleToExistingGroup.ps1" executed="True" result="Failure" success="False" time="1.0019" asserts="0" description="3-xFirewall_AddFirewallRuleToExistingGroup.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.3-xFirewall_AddFirewallRuleToExistingGroup.ps1.Should compile MOFs for example correctly" time="1.0019" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="4-xFirewall_EnableBuiltInFirewallRule.ps1" executed="True" result="Failure" success="False" time="0.8661" asserts="0" description="4-xFirewall_EnableBuiltInFirewallRule.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.4-xFirewall_EnableBuiltInFirewallRule.ps1.Should compile MOFs for example correctly" time="0.8661" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="1-AddEntry.ps1" executed="True" result="Failure" success="False" time="0.994" asserts="0" description="1-AddEntry.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.1-AddEntry.ps1.Should compile MOFs for example correctly" time="0.994" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="2-RemoveEntry.ps1" executed="True" result="Failure" success="False" time="0.8773" asserts="0" description="2-RemoveEntry.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.2-RemoveEntry.ps1.Should compile MOFs for example correctly" time="0.8773" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="1-AddingStaticIP.ps1" executed="True" result="Failure" success="False" time="0.9426" asserts="0" description="1-AddingStaticIP.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.1-AddingStaticIP.ps1.Should compile MOFs for example correctly" time="0.9426" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="1-DisableIPv6.ps1" executed="True" result="Failure" success="False" time="0.9058" asserts="0" description="1-DisableIPv6.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.1-DisableIPv6.ps1.Should compile MOFs for example correctly" time="0.9058" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="1-DisableRDMASettings.ps1" executed="True" result="Failure" success="False" time="0.8856" asserts="0" description="1-DisableRDMASettings.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.1-DisableRDMASettings.ps1.Should compile MOFs for example correctly" time="0.8856" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="2-EnableRDMASettings.ps1" executed="True" result="Failure" success="False" time="0.8834" asserts="0" description="2-EnableRDMASettings.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.2-EnableRDMASettings.ps1.Should compile MOFs for example correctly" time="0.8834" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="1-DisableNetBIOS.ps1" executed="True" result="Failure" success="False" time="0.8644" asserts="0" description="1-DisableNetBIOS.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.1-DisableNetBIOS.ps1.Should compile MOFs for example correctly" time="0.8644" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="1-SetNetConnectionProfile.ps1" executed="True" result="Failure" success="False" time="0.8876" asserts="0" description="1-SetNetConnectionProfile.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.1-SetNetConnectionProfile.ps1.Should compile MOFs for example correctly" time="0.8876" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="1-AddNetworkTeam.ps1" executed="True" result="Failure" success="False" time="0.8853" asserts="0" description="1-AddNetworkTeam.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.1-AddNetworkTeam.ps1.Should compile MOFs for example correctly" time="0.8853" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="2-RemoveTeam.ps1" executed="True" result="Failure" success="False" time="0.8977" asserts="0" description="2-RemoveTeam.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.2-RemoveTeam.ps1.Should compile MOFs for example correctly" time="0.8977" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="1-AddInterface.ps1" executed="True" result="Failure" success="False" time="0.8861" asserts="0" description="1-AddInterface.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.1-AddInterface.ps1.Should compile MOFs for example correctly" time="0.8861" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="2-RemoveInterface.ps1" executed="True" result="Failure" success="False" time="0.8647" asserts="0" description="2-RemoveInterface.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.2-RemoveInterface.ps1.Should compile MOFs for example correctly" time="0.8647" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="1-AddRoute.ps1" executed="True" result="Failure" success="False" time="0.8846" asserts="0" description="1-AddRoute.ps1">
                <results>
                  <test-case description="Should compile MOFs for example correctly" name="Common Tests - Validate Example Files.1-AddRoute.ps1.Should compile MOFs for example correctly" time="0.8846" asserts="0" success="False" result="Failure" executed="True">
                    <failure>
                      <message>Expected: {False}
But was:  {True}</message>
                      <stack-trace>at line: 450 in C:\Users\Daniel\Source\GitHub\xNetworking\Modules\xNetworking\DSCResource.Tests\Meta.Tests.ps1
450:                     $exampleError | Should Be $false
</stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Common Tests - Validate Markdown Files" executed="True" result="Success" success="True" time="27.3257" asserts="0" description="Common Tests - Validate Markdown Files">
            <results>
              <test-case description="Should not have errors in any markdown files" name="Common Tests - Validate Markdown Files.Should not have errors in any markdown files" time="27.3257" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>